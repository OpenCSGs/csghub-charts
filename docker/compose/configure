#!/bin/bash

set -eu

log() {
  # Define log levels as constants
  local log_level="$1"
  local message="$2"
  # Define colors
  local green="\033[0;32m"
  local yellow="\033[0;33m"
  local red="\033[0;31m"
  local blue="\033[0;34m"
  local reset="\033[0m"
  # Get the current timestamp
  local timestamp="$(date +"%Y-%m-%d %H:%M:%S")"

  # Set color based on log level
  case "$log_level" in
    INFO)
      local color=$green
      ;;
    WARN)
      local color=$yellow
      ;;
    ERRO)
      local color=$red
      ;;
    TIPS)
      local color=$blue
       ;;
    *)
      local color=$reset  # Default color if log level is unknown
      ;;
  esac

retry() {
  local n=1
  local max=5
  local delay=10
  while true; do
    "$@" && break || {
      if [[ $n -lt $max ]]; then
        ((n++))
        log "WARN" "Command failed. Attempt $n/$max:"
        sleep $delay;
      else
        log "ERRO" "The command has failed after $n attempts."
        return 1
      fi
    }
  done
}

  # Print logs with timestamp, log level, and color
  if [ "$log_level" = "ERRO" ]; then
    echo -e "${color}[${timestamp}] [${log_level}] ${color}${message}${reset}"
    return 1
  else
    echo -e "${color}[${timestamp}] [${log_level}] ${message}${reset}"
  fi
}

CURRENT_DIR=$(
  cd "$(dirname "$0")" && pwd
)
source ${CURRENT_DIR}/.env

function initial_check() {
  if [[ "$EUID" -ne 0 && $(uname) != 'Darwin' ]]; then
    log "ERRO" "You need to run this script as root user!"
    exit 1
  fi

  if [ -z "$SERVER_DOMAIN" ]; then
    log "ERRO" "SERVER_DOMAIN environment from .env file is required!"
    exit 1
  fi

  if [ "$CSGHUB_WITH_K8S" -eq 1 ]; then
    log "WARN" "Tips: Please make sure the gateway can be accessed in csghub server: telnet ${SPACE_APP_INTERNAL_HOST} ${SPACE_APP_INTERNAL_PORT}."
  fi
}

function mkdirs() {
  for DIR in "$@"; do
    if [[ ! -d "$DIR" ]]; then
      mkdir -p "$DIR" 2>/dev/null || true
    fi
  done
}

## check for root, OS etc..
initial_check

set | grep -E "SERVER_DOMAIN=[0-9a-z.]*" >>/dev/null
if [[ "$?" -ne 0 ]]; then
  log "ERRO" "SERVER_DOMAIN is not set, you should set a valid domain name, such as 121.11.40.42 or demo.opencsg.com etc.."
  exit 1
fi

log "NORM" "Current configured domain name is ${SERVER_DOMAIN}."
####################################################################################
# Configure Fluentd
####################################################################################
log "NORM" "Fluentd:"
FLUENTD_LOG_DIR="${CURRENT_DIR}/logs/fluentd"
mkdirs "$FLUENTD_LOG_DIR"/{archived,buffer}

log "INFO" "- create log directory."
if [[ "$(uname)" == "Linux" ]]; then
  chown -R 100:100 "$FLUENTD_LOG_DIR"
fi

log "INFO" "- render fluent conf."
FLUENTD_CONF_DIR="${CURRENT_DIR}/configs/fluentd"
mkdirs "$FLUENTD_CONF_DIR"

SERVICES=$(docker compose config --services | grep -v fluentd)
cat "$FLUENTD_CONF_DIR"/fluent.conf.sample > "$FLUENTD_CONF_DIR"/fluent.conf
for SERVICE in $SERVICES; do
cat <<EOF >> "$FLUENTD_CONF_DIR"/fluent.conf
<match $SERVICE>
  @type file
  path /fluentd/log/$SERVICE
  append true
  compress gzip
  <buffer>
    @type file
    path /fluentd/buffer/$SERVICE
    chunk_limit_size 20MB
    chunk_limit_records 5000
    queue_limit_length 256
    timekey 1d
    flush_mode interval
    flush_interval 5m
    retry_max_interval 30
    retry_forever true
    flush_at_shutdown true
  </buffer>
  <format>
    @type json
    localtime true
  </format>
</match>

EOF
done

####################################################################################
# Configure Nginx Main
####################################################################################
log "NORM" "Nginx Main:"
NGINX_CONF_DIR="${CURRENT_DIR}/configs/nginx"
mkdirs "$NGINX_CONF_DIR"/ssl

log "INFO" "- render nginx configuration file."
if [ "$SERVER_PROTOCOL" == "http" ]; then
  TEMPLATE_FILE="nginx.conf.sample"
elif [ "$SERVER_PROTOCOL" == "https" ]; then
  TEMPLATE_FILE="nginx.conf.ssl.sample"

  mkdirs ./configs/nginx/ssl
  cp "$SERVER_SSL_CERT" ./configs/nginx/ssl/${SERVER_DOMAIN}.crt
  cp "$SERVER_SSL_KEY" ./configs/nginx/ssl/${SERVER_DOMAIN}.key
else
  log "ERRO" "Unknown nginx protocol: ${SERVER_PROTOCOL}"
  exit 1
fi

sed -e "s/_SERVER_DOMAIN/${SERVER_DOMAIN}/g" \
    -e "s/_SERVER_PORT/${SERVER_PORT}/g" \
    -e "s/_SPACE_APP_INTERNAL_HOST/${SPACE_APP_INTERNAL_HOST}/g" \
    -e "s/_SPACE_APP_INTERNAL_PORT/${SPACE_APP_INTERNAL_PORT}/g" \
    -e "s/_SPACE_APP_NAMESPACE/${SPACE_APP_NAMESPACE}/g" \
    -e "s/_SPACE_APP_INTERNAL_DOMAIN/${SPACE_APP_INTERNAL_DOMAIN}/g" \
    "$NGINX_CONF_DIR"/"$TEMPLATE_FILE" > "$NGINX_CONF_DIR"/nginx.conf

log "INFO" "- generate temporal auth file."
docker run --rm --entrypoint htpasswd "$CSGHUB_IMAGE_PREFIX"/httpd -Bbn "$TEMPORAL_CONSOLE_USER" "$TEMPORAL_CONSOLE_PASSWORD" > "$NGINX_CONF_DIR"/ssl/.htpasswd

####################################################################################
# Configure CoreDNS
####################################################################################
log "NORM" "CoreDNS:"
COREDNS_CONF_DIR="${CURRENT_DIR}/configs/coredns"

log "INFO" "- render coredns Corefile."
sed -e "s/_SPACE_APP_NAMESPACE/${SPACE_APP_NAMESPACE}/g" \
    -e "s/_SPACE_APP_INTERNAL_DOMAIN/${SPACE_APP_INTERNAL_DOMAIN}/g" \
    -e "s/_SPACE_APP_NAMESPACE/${SPACE_APP_NAMESPACE}/g" \
    -e "s/_SPACE_APP_INTERNAL_DOMAIN/${SPACE_APP_INTERNAL_DOMAIN}/g" \
    "$COREDNS_CONF_DIR"/Corefile.sample > "$COREDNS_CONF_DIR"/Corefile

log "INFO" "- generate CoreDNS reverse parsing files."
cat <<EOF > "${COREDNS_CONF_DIR}/${SPACE_APP_NAMESPACE}.${SPACE_APP_INTERNAL_DOMAIN}"
\$ORIGIN ${SPACE_APP_NAMESPACE}.${SPACE_APP_INTERNAL_DOMAIN}.
@ 3600 IN SOA ns1.${SPACE_APP_NAMESPACE}.${SPACE_APP_INTERNAL_DOMAIN}. admin.${SPACE_APP_NAMESPACE}.${SPACE_APP_INTERNAL_DOMAIN}. (
        2022042401 ; Serial
        3600       ; Refresh
        1800       ; Retry
        604800     ; Expire
        86400      ; Minimum TTL
)

*   3600 IN A  192.171.100.100
EOF

####################################################################################
# Configure Minio
####################################################################################
log "NORM" "Minio:"
MINIO_DATA_DIR="${CSGHUB_DATA_DIR:-'./data'}/minio"

## The following is a fix for bitnami/minio.
## This container does not have root permissions by default,
## and there is no way to automatically correct directory permissions.
log "INFO" "- create data directories."
if [[ "$MINIO_ENABLED" -eq 1 ]] && [[ "$(uname)" == "Linux" ]]; then
  mkdirs "$MINIO_DATA_DIR"
  chown -R 1001:1001 "$MINIO_DATA_DIR"
fi

####################################################################################
# Configure Registry
####################################################################################
log "NORM" "Registry:"
REGISTRY_CONF_DIR="${CURRENT_DIR}/configs/registry"
mkdirs "$REGISTRY_CONF_DIR"/auth

log "INFO" "- generate registry auth file."
docker run --rm --entrypoint htpasswd "$CSGHUB_IMAGE_PREFIX"/httpd -Bbn "$REGISTRY_USERNAME" "$REGISTRY_PASSWORD" > "$REGISTRY_CONF_DIR"/auth/.htpasswd

####################################################################################
# Configure Gitaly
####################################################################################
log "NORM" "Gitaly:"
GITALY_CONF_DIR="${CURRENT_DIR}/configs/gitaly"
mkdirs "$GITALY_CONF_DIR"

log "INFO" "- render configuration file."
sed "s/_GITALY_AUTH_TOKEN/${GITALY_AUTH_TOKEN}/g" "$GITALY_CONF_DIR"/config.toml.sample > "$GITALY_CONF_DIR"/config.toml

####################################################################################
# Configure Gitlab-Shell
####################################################################################
log "NORM" "Gitlab-Shell:"
GITLAB_SHELL_CONF_DIR="${CURRENT_DIR}/configs/gitlab-shell"
mkdirs "$GITLAB_SHELL_CONF_DIR"

log "INFO" "- generate gitaly auth file."
echo "$GITALY_AUTH_TOKEN" > "$GITLAB_SHELL_CONF_DIR"/.gitlab_shell_secret

log "INFO" "- generate host key pairs for gitlab-shell."
GITLAB_SHELL_DATA_DIR="${CSGHUB_DATA_DIR:-'./data'}/gitlab-shell/keys"
mkdirs "$GITLAB_SHELL_DATA_DIR"

generate_ssh_key() {
    local key_type=$1
    local key_file="$GITLAB_SHELL_DATA_DIR/ssh_host_${key_type}_key"

    if [[ ! -d "$GITLAB_SHELL_DATA_DIR" ]]; then
        mkdir -p "$GITLAB_SHELL_DATA_DIR" 2>/dev/null
    fi

    if [[ ! -e "$key_file" ]]; then
        log "INFO" "- generating ${key_type} host key pair."
        ssh-keygen -t "$key_type" -N "" -f "$key_file"
    else
        log "WARN" "- ssh_host_${key_type}_key pair already exists."
    fi
}

generate_ssh_key "rsa"
generate_ssh_key "ecdsa"
generate_ssh_key "ed25519"
####################################################################################
# Configure Csghub_Space_Builder
####################################################################################
log "NORM" "Csghub_Space_Builder:"
CSGHUB_SPACE_BUILDER_CONF_DIR="${CURRENT_DIR}/configs/docker"
mkdirs "$CSGHUB_SPACE_BUILDER_CONF_DIR"

log "INFO" "- render docker daemon file."
sed -e "s/_SERVER_DOMAIN/${SERVER_DOMAIN}/g" \
    -e "s/_REGISTRY_PORT/${REGISTRY_PORT}/g" \
    "$CSGHUB_SPACE_BUILDER_CONF_DIR"/daemon.json.sample > "$CSGHUB_SPACE_BUILDER_CONF_DIR"/daemon.json

log "INFO" "- render docker config file."
REGISTRY_USER_PASSWORD_BASE64=$(echo -n "${REGISTRY_USERNAME}:${REGISTRY_PASSWORD}" | base64)
sed -e "s/_REGISTRY_USERNAME/${REGISTRY_USERNAME}/g" \
    -e "s/_REGISTRY_PASSWORD/${REGISTRY_PASSWORD}/g" \
    -e "s/_REGISTRY_ADDRESS/${REGISTRY_ADDRESS}/g" \
    -e "s/_REGISTRY_USER_PASSWORD_BASE64/${REGISTRY_USER_PASSWORD_BASE64}/g" \
    "$CSGHUB_SPACE_BUILDER_CONF_DIR"/config.json.sample > "$CSGHUB_SPACE_BUILDER_CONF_DIR"/config.json

####################################################################################
# Configure Nats
####################################################################################
log "NORM" "Nats:"
NATS_CONF_DIR="${CURRENT_DIR}/configs/nats"
mkdirs "$NATS_CONF_DIR"

log "INFO" "- render nats config file."
NATS_ROOT_PASSWORD_HTPASSWD=$(docker run --rm --entrypoint htpasswd "$CSGHUB_IMAGE_PREFIX"/httpd -Bbn "$NATS_ROOT_USER" "$NATS_ROOT_PASSWORD" | cut -d ':' -f 2)
sed -e "s/_NATS_ROOT_USER/${NATS_ROOT_USER}/g" \
    -e "s|_NATS_ROOT_PASSWORD_HTPASSWD|${NATS_ROOT_PASSWORD_HTPASSWD}|g" \
    "$NATS_CONF_DIR"/nats-server.conf.sample > "$NATS_CONF_DIR"/nats-server.conf

####################################################################################
# Configure Casdoor
####################################################################################
log "NORM" "Casdoor:"
CASDOOR_CONF_DIR="${CURRENT_DIR}/configs/casdoor/conf"
mkdirs "$CASDOOR_CONF_DIR"

log "INFO" "- render casdoor init_data file."
sed -e "s/_SERVER_PROTOCOL/${SERVER_PROTOCOL}/g" \
    -e "s/_SERVER_DOMAIN/${SERVER_DOMAIN}/g" \
    -e "s/_SERVER_PORT/${SERVER_PORT}/g" \
    "$CASDOOR_CONF_DIR"/init_data.json.sample > "$CASDOOR_CONF_DIR"/init_data.json

log "INFO" "- render update RedirectURLs."
sed -e "s/_SERVER_PROTOCOL/${SERVER_PROTOCOL}/g" \
    -e "s/_SERVER_DOMAIN/${SERVER_DOMAIN}/g" \
    -e "s/_SERVER_PORT/${SERVER_PORT}/g" \
   ${CURRENT_DIR}/configs/server/scripts/update_casdoor.sql.sample > ${CURRENT_DIR}/configs/server/scripts/update_casdoor.sql

log "INFO" "- render casdoor config file."
sed -e "s/_POSTGRES_USER/${POSTGRES_USER}/g" \
    -e "s/_POSTGRES_PASSWORD/${POSTGRES_PASSWORD}/g" \
    -e "s/_POSTGRES_HOST/${POSTGRES_HOST}/g" \
    -e "s/_POSTGRES_PORT/${POSTGRES_PORT}/g" \
    "$CASDOOR_CONF_DIR"/app.conf.sample > "$CASDOOR_CONF_DIR"/app.conf

####################################################################################
# Configure Csghub Runner Docker Config
####################################################################################
set +e
if [ -f "$KUBE_CONFIG_DIR/config" ] && [ "$CSGHUB_WITH_K8S" -eq 1 ]; then
  EXISTS_SECRET=$(docker run --rm -v "$KUBE_CONFIG_DIR"/config:/.kube/config "$CSGHUB_IMAGE_PREFIX"/bitnami/kubectl:latest get secret -n "$SPACE_APP_NAMESPACE" | grep -c csghub-docker-config)
  if [ "$EXISTS_SECRET" -eq 1 ]; then
    docker run --rm -v "$KUBE_CONFIG_DIR"/config:/.kube/config "$CSGHUB_IMAGE_PREFIX"/bitnami/kubectl:latest \
        delete secret csghub-docker-config \
        --namespace="$SPACE_APP_NAMESPACE"
  fi

  EXISTS_NS=$(docker run --rm -v "$KUBE_CONFIG_DIR"/config:/.kube/config "$CSGHUB_IMAGE_PREFIX"/bitnami/kubectl:latest get namespace "$SPACE_APP_NAMESPACE" | grep -c "$SPACE_APP_NAMESPACE")
  if [ "$EXISTS_NS" -eq 0 ]; then
      docker run --rm -v "$KUBE_CONFIG_DIR"/config:/.kube/config "$CSGHUB_IMAGE_PREFIX"/bitnami/kubectl:latest create namespace "$SPACE_APP_NAMESPACE"
  fi

  docker run --rm -v "$KUBE_CONFIG_DIR"/config:/.kube/config "$CSGHUB_IMAGE_PREFIX"/bitnami/kubectl:latest \
      create secret docker-registry csghub-docker-config \
      --docker-server="$REGISTRY_ADDRESS" \
      --docker-username="$REGISTRY_USERNAME" \
      --docker-password="$REGISTRY_PASSWORD" \
      --namespace="$SPACE_APP_NAMESPACE"
fi

log "NORM" "Starting services..."
retry docker compose -f docker-compose.yml up -d --remove-orphans

log "NORM" "Installation Completed."
log "INFO" "CSGHub service can be visited by URL:"
if [ "${SERVER_PORT}" == 80 ] || [ "${SERVER_PORT}" -eq 443 ]; then
  SP=""
else
  SP=":${SERVER_PORT}"
fi

if [ "$SERVER_PROTOCOL" == "http" ]; then
  log "INFO" "\thttp://${SERVER_DOMAIN}${SP}"
elif [ "$SERVER_PROTOCOL" == "https" ]; then
  log "INFO" "\thttps://${SERVER_DOMAIN}${SP}"
fi

docker compose -f docker-compose.yml ps --format "table {{.ID}}\t{{.Name}}\t{{.Status}}\t{{.Ports}}"
