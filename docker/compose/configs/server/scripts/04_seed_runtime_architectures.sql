--
-- Record Timestamp
--
SELECT now() as "Execute Timestamp";

--
-- PostgreSQL database dump
--
SET exit_on_error = on;
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Set Default Schema for All Tables
--

SELECT pg_catalog.set_config('search_path', 'public', false);

--
-- Seed Data for Name: runtime_architectures; Type: TABLE DATA; Schema: public; Owner: csghub_server
--

WITH framework_architecture AS (
    SELECT *
    FROM (
        VALUES
            ('VLLM', 'ArcticForCausalLM'),
            ('VLLM', 'BaiChuanForCausalLM'),
            ('VLLM', 'BloomForCausalLM'),
            ('VLLM', 'ChatGLMModel'),
            ('VLLM', 'CohereForCausalLM'),
            ('VLLM', 'DbrxForCausalLM'),
            ('VLLM', 'DeciLMForCausalLM'),
            ('VLLM', 'Phi3VForCausalLM'),
            ('VLLM', 'PaliGemmaForConditionalGeneration'),
            ('VLLM', 'LlavaNextForConditionalGeneration'),
            ('VLLM', 'LlavaForConditionalGeneration'),
            ('VLLM', 'FuyuForCausalLM'),
            ('VLLM', 'ChameleonForConditionalGeneration'),
            ('VLLM', 'XverseForCausalLM'),
            ('VLLM', 'Starcoder2ForCausalLM'),
            ('VLLM', 'StableLmForCausalLM'),
            ('VLLM', 'Qwen2MoeForCausalLM'),
            ('VLLM', 'Qwen2ForCausalLM'),
            ('VLLM', 'QWenLMHeadModel'),
            ('VLLM', 'PersimmonForCausalLM'),
            ('VLLM', 'Phi3SmallForCausalLM'),
            ('VLLM', 'Phi3ForCausalLM'),
            ('VLLM', 'PhiForCausalLM'),
            ('VLLM', 'OrionForCausalLM'),
            ('VLLM', 'OPTForCausalLM'),
            ('VLLM', 'OLMoForCausalLM'),
            ('VLLM', 'MPTForCausalLM'),
            ('VLLM', 'MixtralForCausalLM'),
            ('VLLM', 'MistralForCausalLM'),
            ('VLLM', 'MiniCPMForCausalLM'),
            ('VLLM', 'LlamaForCausalLM'),
            ('VLLM', 'JambaForCausalLM'),
            ('VLLM', 'JAISLMHeadModel'),
            ('VLLM', 'InternLM2ForCausalLM'),
            ('VLLM', 'InternLMForCausalLM'),
            ('VLLM', 'GPTNeoXForCausalLM'),
            ('VLLM', 'GPTJForCausalLM'),
            ('VLLM', 'GPTBigCodeForCausalLM'),
            ('VLLM', 'GPT2LMHeadModel'),
            ('VLLM', 'Gemma2ForCausalLM'),
            ('VLLM', 'GemmaForCausalLM'),
            ('VLLM', 'FalconForCausalLM'),
            ('VLLM', 'AquilaForCausalLM'),
            ('LLaMA-Factory', 'MistralForCausalLM'),
            ('LLaMA-Factory', 'MixtralForCausalLM'),
            ('LLaMA-Factory', 'OlmoForCausalLM'),
            ('LLaMA-Factory', 'PaliGemmaForConditionalGeneration'),
            ('LLaMA-Factory', 'PhiForCausalLM'),
            ('LLaMA-Factory', 'LlavaLlamaForCausalLM'),
            ('LLaMA-Factory', 'YuanForCausalLM'),
            ('LLaMA-Factory', 'BaiChuanForCausalLM'),
            ('LLaMA-Factory', 'BloomForCausalLM'),
            ('LLaMA-Factory', 'ChatGLMModel'),
            ('LLaMA-Factory', 'CohereForCausalLM'),
            ('LLaMA-Factory', 'DeepseekV2ForCausalLM'),
            ('LLaMA-Factory', 'FalconForCausalLM'),
            ('LLaMA-Factory', 'Gemma2ForCausalLM'),
            ('LLaMA-Factory', 'GemmaForCausalLM'),
            ('LLaMA-Factory', 'InternLM2ForCausalLM'),
            ('LLaMA-Factory', 'InternLM2ForRewardModel'),
            ('LLaMA-Factory', 'LlamaForCausalLM'),
            ('LLaMA-Factory', 'LlavaForConditionalGeneration'),
            ('LLaMA-Factory', 'LlavaNextForConditionalGeneration'),
            ('LLaMA-Factory', 'Phi3ForCausalLM'),
            ('LLaMA-Factory', 'Qwen2ForCausalLM'),
            ('LLaMA-Factory', 'QWenLMHeadModel'),
            ('LLaMA-Factory', 'Qwen2MoeForCausalLM'),
            ('LLaMA-Factory', 'Starcoder2ForCausalLM'),
            ('LLaMA-Factory', 'XverseForCausalLM'),
            ('TGI', 'GemmaForCausalLM'),
            ('TGI', 'Phi3ForCausalLM'),
            ('TGI', 'IdeficsForVisionText2Text'),
            ('TGI', 'GPTNeoXForCausalLM'),
            ('TGI', 'GPT2LMHeadModel'),
            ('TGI', 'MPTForCausalLM'),
            ('TGI', 'Starcoder2ForCausalLM'),
            ('TGI', 'FalconForCausalLM'),
            ('TGI', 'BaichuanForCausalLM'),
            ('TGI', 'PhiForCausalLM'),
            ('TGI', 'GPTBigCodeForCausalLM'),
            ('TGI', 'MixtralForCausalLM'),
            ('TGI', 'LlamaForCausalLM'),
            ('TGI', 'LlavaNextForConditionalGeneration'),
            ('TGI', 'Idefics2ForConditionalGeneration'),
            ('TGI', 'DeepseekV2ForCausalLM'),
            ('TGI', 'BloomForCausalLM'),
            ('TGI', 'GPT2LMHeadCustomModel'),
            ('TGI', 'T5ForConditionalGeneration'),
            ('TGI', 'OPTForCausalLM'),
            ('TGI', 'Qwen2ForCausalLM'),
            ('TGI', 'MistralForCausalLM'),
            ('TGI', 'DbrxForCausalLM'),
            ('TGI', 'CohereForCausalLM'),
            ('TGI', 'PaliGemmaForConditionalGeneration'),
            ('OpenCompass', 'DeciLMForCausalLM'),
            ('OpenCompass', 'ChatGLMModel'),
            ('OpenCompass', 'DbrxForCausalLM'),
            ('OpenCompass', 'AquilaForCausalLM'),
            ('OpenCompass', 'ArcticForCausalLM'),
            ('OpenCompass', 'BaiChuanForCausalLM'),
            ('OpenCompass', 'BloomForCausalLM'),
            ('OpenCompass', 'FalconForCausalLM'),
            ('OpenCompass', 'GemmaForCausalLM'),
            ('OpenCompass', 'Gemma2ForCausalLM'),
            ('OpenCompass', 'GPTNeoXForCausalLM'),
            ('OpenCompass', 'InternLMForCausalLM'),
            ('OpenCompass', 'InternLM2ForCausalLM'),
            ('OpenCompass', 'MiniCPMForCausalLM'),
            ('OpenCompass', 'MistralForCausalLM'),
            ('OpenCompass', 'MixtralForCausalLM'),
            ('OpenCompass', 'PhiForCausalLM'),
            ('OpenCompass', 'Phi3ForCausalLM'),
            ('OpenCompass', 'Phi3SmallForCausalLM'),
            ('OpenCompass', 'Qwen2ForCausalLM'),
            ('OpenCompass', 'Qwen2MoeForCausalLM'),
            ('OpenCompass', 'XverseForCausalLM'),
            ('OpenCompass', 'ChameleonForConditionalGeneration'),
            ('OpenCompass', 'LlavaNextForConditionalGeneration'),
            ('OpenCompass', 'Phi3VForCausalLM'),
            ('OpenCompass', 'PaliGemmaForConditionalGeneration'),
            ('OpenCompass', 'LlavaForConditionalGeneration'),
            ('OpenCompass', 'FuyuForCausalLM'),
            ('OpenCompass', 'Starcoder2ForCausalLM'),
            ('OpenCompass', 'StableLmForCausalLM'),
            ('OpenCompass', 'QWenLMHeadModel'),
            ('OpenCompass', 'PersimmonForCausalLM'),
            ('OpenCompass', 'OrionForCausalLM'),
            ('OpenCompass', 'OPTForCausalLM'),
            ('OpenCompass', 'OLMoForCausalLM'),
            ('OpenCompass', 'MPTForCausalLM'),
            ('OpenCompass', 'LlamaForCausalLM'),
            ('OpenCompass', 'JambaForCausalLM'),
            ('OpenCompass', 'JAISLMHeadModel'),
            ('OpenCompass', 'GPTJForCausalLM'),
            ('OpenCompass', 'GPTBigCodeForCausalLM'),
            ('OpenCompass', 'GPT2LMHeadModel'),
            ('OpenCompass', 'CohereForCausalLM'),
            ('SGLang', 'MiniCPM3ForCausalLM'),
            ('SGLang', 'XverseMoeForCausalLM'),
            ('SGLang', 'BaichuanForCausalLM'),
            ('SGLang', 'InternLM2ForRewardModel'),
            ('SGLang', 'DbrxForCausalLM'),
            ('SGLang', 'Qwen2VLForConditionalGeneration'),
            ('SGLang', 'Olmo2ForCausalLM'),
            ('SGLang', 'DeepseekV2ForCausalLM'),
            ('SGLang', 'DeepseekV3ForCausalLM'),
            ('SGLang', 'LlavaVidForCausalLM'),
            ('SGLang', 'LlamaForClassification'),
            ('SGLang', 'MistralForCausalLM'),
            ('SGLang', 'GPT2LMHeadModel'),
            ('SGLang', 'OlmoForCausalLM'),
            ('SGLang', 'MixtralForCausalLM'),
            ('SGLang', 'Qwen2MoeForCausalLM'),
            ('SGLang', 'YiVLForCausalLM'),
            ('SGLang', 'LlamaEmbeddingModel'),
            ('SGLang', 'MistralModel'),
            ('SGLang', 'Qwen2ForCausalLM'),
            ('SGLang', 'LlamaForCausalLMEagle'),
            ('SGLang', 'GraniteForCausalLM'),
            ('SGLang', 'ExaoneForCausalLM'),
            ('SGLang', 'CohereForCausalLM'),
            ('SGLang', 'GPTBigCodeForCausalLM'),
            ('SGLang', 'GemmaForCausalLM'),
            ('SGLang', 'Gemma2ForSequenceClassification'),
            ('SGLang', 'QuantMixtralForCausalLM'),
            ('SGLang', 'TorchNativePhi3ForCausalLM'),
            ('SGLang', 'TorchNativeLlamaForCausalLM'),
            ('SGLang', 'OlmoeForCausalLM'),
            ('SGLang', 'ChatGLMModel'),
            ('SGLang', 'Grok1ForCausalLM'),
            ('SGLang', 'Grok1ModelForCausalLM'),
            ('SGLang', 'InternLM2ForCausalLM'),
            ('SGLang', 'Phi3SmallForCausalLM'),
            ('SGLang', 'StableLmForCausalLM'),
            ('SGLang', 'MiniCPMForCausalLM'),
            ('SGLang', 'LlavaLlamaForCausalLM'),
            ('SGLang', 'LlavaQwenForCausalLM'),
            ('SGLang', 'LlavaMistralForCausalLM'),
            ('SGLang', 'MllamaForConditionalGeneration'),
            ('SGLang', 'LlamaForCausalLM'),
            ('SGLang', 'Phi3ForCausalLM'),
            ('SGLang', 'Gemma2ForCausalLM'),
            ('SGLang', 'XverseForCausalLM'),
            ('SGLang', 'QWenLMHeadModel'),
            ('SGLang', 'DeepseekForCausalLM'),
            ('HF-Inference-Toolkit', 'StableDiffusionPipeline'),
            ('HF-Inference-Toolkit', 'LatentConsistencyModelPipeline'),
            ('HF-Inference-Toolkit', 'StableDiffusionXLPipeline'),
            ('HF-Inference-Toolkit', 'StableDiffusion3Pipeline'),
            ('HF-Inference-Toolkit', 'FluxPipeline'),
            ('TEI', 'mistral'),
            ('TEI', 'qwen2'),
            ('TEI', 'new'),
            ('TEI', 'bert'),
            ('TEI', 'xlm-roberta'),
            ('TEI', 'nomic_bert'),
            ('TEI', 'mpnet'),
            ('Llama.cpp', 'llama'),
            ('Llama.cpp', 'deci'),
            ('Llama.cpp', 'falcon'),
            ('Llama.cpp', 'baichuan'),
            ('Llama.cpp', 'grok'),
            ('Llama.cpp', 'gpt2'),
            ('Llama.cpp', 'gptj'),
            ('Llama.cpp', 'gptneox'),
            ('Llama.cpp', 'mpt'),
            ('Llama.cpp', 'starcoder'),
            ('Llama.cpp', 'refact'),
            ('Llama.cpp', 'bert'),
            ('Llama.cpp', 'nomic-bert'),
            ('Llama.cpp', 'jina-bert-v2'),
            ('Llama.cpp', 'bloom'),
            ('Llama.cpp', 'stablelm'),
            ('Llama.cpp', 'qwen'),
            ('Llama.cpp', 'qwen2'),
            ('Llama.cpp', 'qwen2moe'),
            ('Llama.cpp', 'qwen2vl'),
            ('Llama.cpp', 'phi2'),
            ('Llama.cpp', 'phi3'),
            ('Llama.cpp', 'phimoe'),
            ('Llama.cpp', 'plamo'),
            ('Llama.cpp', 'codeshell'),
            ('Llama.cpp', 'orion'),
            ('Llama.cpp', 'internlm2'),
            ('Llama.cpp', 'minicpm'),
            ('Llama.cpp', 'minicpm3'),
            ('Llama.cpp', 'gemma'),
            ('Llama.cpp', 'gemma2'),
            ('Llama.cpp', 'starcoder2'),
            ('Llama.cpp', 'rwkv6'),
            ('Llama.cpp', 'rwkv6qwen2'),
            ('Llama.cpp', 'mamba'),
            ('Llama.cpp', 'xverse'),
            ('Llama.cpp', 'command-r'),
            ('Llama.cpp', 'cohere2'),
            ('Llama.cpp', 'dbrx'),
            ('Llama.cpp', 'olmo'),
            ('Llama.cpp', 'olmo2'),
            ('Llama.cpp', 'olmoe'),
            ('Llama.cpp', 'openelm'),
            ('Llama.cpp', 'arctic'),
            ('Llama.cpp', 'deepseek'),
            ('Llama.cpp', 'deepseek2'),
            ('Llama.cpp', 'chatglm'),
            ('Llama.cpp', 'bitnet'),
            ('Llama.cpp', 't5'),
            ('Llama.cpp', 't5encoder'),
            ('Llama.cpp', 'jais'),
            ('Llama.cpp', 'nemotron'),
            ('Llama.cpp', 'exaone'),
            ('Llama.cpp', 'granite'),
            ('Llama.cpp', 'granitemoe'),
            ('Llama.cpp', 'chameleon'),
            ('Llama.cpp', 'wavtokenizer-dec')
    ) AS data(frame_name, architecture_name)
)
INSERT INTO public.runtime_architectures (runtime_framework_id, architecture_name)
    SELECT r.id, f.architecture_name
    FROM framework_architecture f, public.runtime_frameworks r
    WHERE f.frame_name = r.frame_name
ON CONFLICT (runtime_framework_id, architecture_name)
    DO NOTHING;
