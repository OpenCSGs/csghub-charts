## All modifications in this configuration file are only performed under global configuration block.
## Any configuration outside global configuration block is an automatic adaptation configuration and should not be modified.

## Global configuration
global:
  ## List of image pull secrets.
  ## Used to pull Docker images from private repositories.
  ## This array is empty by default, meaning no secrets are required by default.
  imagePullSecrets: [ ]

  ## Host configuration
  domain: example.com

  ## Ingress configuration
  ingress:
    enabled: true
    tls:
      enabled: false
      autoGenerated: false
      # secretName: ""
    ## Configure this section to adjust the port exposure method.
    ## The optional methods are NodePort or LoadBalancer.
    ## Ith should be noted that no matter which method is used, do not comment the nodePorts parameter below
    service:
      ## The optional methods are `NodePort` or `LoadBalancer`.
      type: LoadBalancer

  ## This section configures Pod Disruption Budgets (PDBs).
  ## PDBs ensure that a minimum number of pods are available during voluntary disruptions.
  pdb:
    create: true
    ## minAvailable specifies the minimum number of pods that must be available after the eviction.
    minAvailable: 1
    ## maxUnavailable specifies the maximum number of pods that may be made unavailable after the eviction.
    # maxUnavailable: 0

  ## Specify whether to enable internal redis.
  ## If not, please specify external redis connection information in subsequent configurations.
  redis:
    enabled: true
    ## Persistence settings for the Redis data.
    persistence:
      ## Specifies the StorageClass used for provisioning the volume.
      # storageClass: ""
      ## Defines the access modes of the volume.
      ## ReadWriteOnce means the volume can be mounted as read-write by a single node.
      # accessMode: [ "ReadWriteOnce" ]
      ## Specifies the size of the persistent volume.
      ## This should be adjusted based on expected usage and data growth over time.
      # size:  1Gi

  ## Specify whether to enable internal postgresql.
  ## If not, please specify external postgresql connection information in subsequent configurations.
  postgresql:
    enabled: true
    ## Persistence settings for the PostgreSQL data.
    persistence:
      ## Specifies the StorageClass used for provisioning the volume.
      # storageClass: ""
      ## Defines the access modes of the volume.
      ## ReadWriteOnce means the volume can be mounted as read-write by a single node.
      # accessMode: [ "ReadWriteOnce" ]
      ## Specifies the size of the persistent volume.
      ## This should be adjusted based on expected usage and data growth over time.
      # size:  2Gi

  ## Specify whether to enable internal minio.
  ## If not, please specify external minio connection information in subsequent configurations.
  minio:
    enabled: true
    ## Persistence settings for the Minio data.
    persistence:
      ## Specifies the StorageClass used for provisioning the volume.
      # storageClass: ""
      ## Defines the access modes of the volume.
      ## ReadWriteOnce means the volume can be mounted as read-write by a single node.
      # accessMode: [ "ReadWriteOnce" ]
      ## Specifies the size of the persistent volume.
      ## This should be adjusted based on expected usage and data growth over time.
      # size:  5Gi

  ## Specify whether to enable internal registry.
  ## If not, please specify external registry connection information in subsequent configurations.
  registry:
    enabled: true
    ## Persistence settings for the Registry data.
    namespace: "csghub"
    persistence:
      ## Specifies the StorageClass used for provisioning the volume.
      # storageClass: ""
      ## Defines the access modes of the volume.
      ## ReadWriteOnce means the volume can be mounted as read-write by a single node.
      # accessMode: [ "ReadWriteOnce" ]
      ## Specifies the size of the persistent volume.
      ## This should be adjusted based on expected usage and data growth over time.
      # size:  10Gi
    ## Configuration for ingress. If enabled, you can access Registry console by Registry.<domain>
    ingress:
      ## Enable or disable ingress.
      enabled: true
      ## TLS settings for ingress.
      tls:
        ## Enable or disable TLS.
        enabled: false
        ## Determines if TLS certificates are auto-generated.
        ## When set to false, it implies that you will provide your own certificates.
        autoGenerated: false
        ## The name of the secret that contains the TLS certificate and key.
        # secretName: ""
    objectStore: { }
      ## The endpoint URL of the object storage service.
      # endpoint: "http://127.0.0.1:9000"
      ## The access key ID for authentication with the object storage service.
      ## This is empty by default and should be provided securely.
      # accessKey: ""
      ## The secret access key for authentication with the object storage service.
      ## This is also empty by default and should be provided securely.
      # accessSecret: ""
      ## The name of the bucket within the object storage service to be used.
      # bucket: "csghub-server"
      ## The region where the bucket is located within the object storage service.
      # region: "cn-north-1"
      ## If encrypted with TLS
      # encrypt: true
      ## If encrypted with secure TLS certificates
      # secure: true

  ## Server configuration
  ## Defines the number of server replicas for high availability or load balancing.
  server:
    replicas: 1
    image:
      ## Specifies the location of the Server Docker image in the Server.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/csghub_server
      ## Defines the specific version of the Server image to use.
      # tag: v1.2.0
      ## Determines how the image should be pulled from the Server.
      pullPolicy: "IfNotPresent"
    ## List of image pull secrets.
    imagePullSecrets: [ ]
    service:
      ## This determines how the Server service is accessed within the cluster or from external sources.
      type: ClusterIP
      ## This is the network port where the Server service will listen for connections.
      port: 8080
    ## Specifies the location and credentials for accessing the external PostgreSQL database.
    postgresql: { }
      ## Specifies the host address of the PostgreSQL database server.
      # host: "127.0.0.1"
      ## Defines the port on which the PostgreSQL server is listening.
      # port: 5432
      ## The username used for authentication with the PostgreSQL database.
      # user: "server"
      ## The password used for authentication with the PostgreSQL database.
      ## It is empty by default for security reasons and should be set through secure means.
      # password: ""
      ## The name of the database to connect to on the PostgreSQL server.
      # database: "server"
      ## Sets the timezone for the database connection, ensuring time-based operations use the correct timezone.
      # timezone: "Asia/Shanghai"
    ## Specifies the location and credentials for accessing the external Object Storage (OSS) service.
    objectStore: { }
      ## The endpoint URL of the object storage service.
      # endpoint: "http://127.0.0.1:9000"
      ## The access key ID for authentication with the object storage service.
      ## This is empty by default and should be provided securely.
      # accessKey: ""
      ## The secret access key for authentication with the object storage service.
      ## This is also empty by default and should be provided securely.
      # accessSecret: ""
      ## The name of the bucket within the object storage service to be used.
      # bucket: "csghub-server"
      ## The region where the bucket is located within the object storage service.
      # region: "cn-north-1"
      ## When set to "true", the bucket name will be part of the URL path.
      ## For example, the URL will be in the format:
      ## http://<minio-server>/<bucket-name>/<object-key>
      # pathStyle: "true"

  ## GitLab Shell configuration
  ## GitLab Shell is a SSH access and repository management software developed for GitLab.
  gitlabShell:
    ## Specify whether to enable GitLab Shell within the deployment.
    enabled: true
    image:
      ## Specifies the location of the Gitlab-Shell Docker image in the Gitlab-Shell.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/gitlab-shell
      ## Defines the specific version of the Gitlab-Shell image to use.
      tag: v17.5.0
      ## Determines how the image should be pulled from the Gitlab-Shell.
      pullPolicy: "IfNotPresent"
    ## List of image pull secrets.
    imagePullSecrets: [ ]
    service:
      ## This determines how the Gitlab-Shell service is accessed within the cluster or from external sources.
      type: ClusterIP
      ## This is the network port where the Gitlab-Shell service will listen for connections.
      port: 22
    ## Persistence settings for the Minio data.
    persistence:
      ## Specifies the StorageClass used for provisioning the volume.
      ## An empty value means the default StorageClass is used.
      ## StorageClass defines the type of storage used and can affect performance and cost.
      # storageClass: ""
      ## Defines the access modes of the volume.
      ## ReadWriteOnce means the volume can be mounted as read-write by a single node.
      ## This is suitable for most use cases where a single instance of Minio is running.
      accessMode: [ "ReadWriteOnce" ]
      ## Specifies the size of the persistent volume.
      ## This should be adjusted based on expected usage and data growth over time.
      # size:  1Gi

  ## Gitaly configuration
  ## Gitaly is a Git RPC service for handling all the git calls made by GitLab.
  gitaly:
    ## Specify whether to enable Gitaly within the deployment.
    enabled: true
    image:
      ## Specifies the location of the Gitaly Docker image in the Gitaly.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/gitaly
      ## Defines the specific version of the Gitaly image to use.
      tag: v17.5.0
      ## Determines how the image should be pulled from the Gitaly.
      pullPolicy: "IfNotPresent"
    ## List of image pull secrets.
    imagePullSecrets: [ ]
    service:
      ## This determines how the Gitaly service is accessed within the cluster or from external sources.
      type: ClusterIP
      ## This is the network port where the Gitaly service will listen for connections.
      port: 8075
    ## Persistence settings for the Minio data.
    persistence:
      ## Specifies the StorageClass used for provisioning the volume.
      ## An empty value means the default StorageClass is used.
      ## StorageClass defines the type of storage used and can affect performance and cost.
      # storageClass: ""
      ## Defines the access modes of the volume.
      ## ReadWriteOnce means the volume can be mounted as read-write by a single node.
      ## This is suitable for most use cases where a single instance of Minio is running.
      accessMode: [ "ReadWriteOnce" ]
      ## Specifies the size of the persistent volume.
      ## This should be adjusted based on expected usage and data growth over time.
      # size:  10Gi

  ## Builder configuration
  ## Specifies the persistent storage size for the builder component.
  builder:
    replicas: 1
    image:
      ## Specifies the location of the Builder Docker image in the Builder.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/csghub_space_builder
      ## Defines the specific version of the Builder image to use.
      ## Please keep this default
      tag: v1.0.0
      ## Determines how the image should be pulled from the Builder.
      pullPolicy: "IfNotPresent"
    ## List of image pull secrets.
    imagePullSecrets: [ ]
    service:
      ## This determines how the Builder service is accessed within the cluster or from external sources.
      type: ClusterIP
      ## This is the network port where the Builder service will listen for connections.
      port: 8080
    ## External Redis configuration.
    ## This section is required if an internal Redis is not enabled.
    redis: { }
      ## Specifies the hostname or IP address of the Redis server.
      # endpoint: redis.example.com
      ## Defines the port on which the Redis server is listening.
      # port: 6379
      ## Provides the password for authenticating with the Redis server.
      ## Leave this empty if no authentication is required.
      # password: ""
    ## External Registry configuration.
    ## Docker Registry configuration for the builder
    registry: { }
      # repository: registry.example.com
      # namespace: csghub
      # username: ""
      # password: ""
    ## Persistence settings for the Builder data.
    persistence:
      ## Specifies the StorageClass used for provisioning the volume.
      # storageClass: ""
      ## Defines the access modes of the volume.
      ## ReadWriteOnce means the volume can be mounted as read-write by a single node.
      # accessMode: [ "ReadWriteOnce" ]
      ## Specifies the size of the persistent volume.
      ## This should be adjusted based on expected usage and data growth over time.
      # size:  6Gi

  ## Runner configuration
  ## Specifies the Kubernetes secret name that contains the kubeconfig file, allowing the runner to interact with the Kubernetes API.
  runner:
    replicas: 1
    image:
      ## Specifies the location of the Runner Docker image in the Runner.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/csghub_server
      ## Defines the specific version of the Runner image to use.
      # tag: v1.2.0
      ## Determines how the image should be pulled from the Runner.
      pullPolicy: "IfNotPresent"
    ## List of image pull secrets.
    imagePullSecrets: [ ]
    service:
      ## This determines how the Runner service is accessed within the cluster or from external sources.
      type: ClusterIP
      ## This is the network port where the Runner service will listen for connections.
      port: 8082
    ## Defines the Kubernetes namespace in which the runner will operate.
    namespace: "space"
    ## Specifies the internal domain (from knative serving) name for the runner to use.
    internalDomain:
      - domain: app.internal
        ## The IP address associated access the internal domain by kourier.
        host: 192.168.18.3
        ## The port on which the internal domain will be accessible by kourier.
        port: 30213
      - domain: kna.internal
        host: 192.168.18.4
        port: 30721
    ## The name of the Kubernetes secret containing the kubeconfig file. This is crucial for the runner to interact with the Kubernetes API.
    kubeConfig:
      secretName: kube-configs

  ## Portal configuration
  ## This section configures the portal component of the system.
  portal:
    image:
      ## Specifies the location of the Runner Docker image in the Runner.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/csghub_portal
      ## Defines the specific version of the Runner image to use.
      tag: v1.2.1
      ## Determines how the image should be pulled from the Runner.
      pullPolicy: "IfNotPresent"
    ## List of image pull secrets.
    imagePullSecrets: [ ]
    service:
      ## This determines how the Runner service is accessed within the cluster or from external sources.
      type: ClusterIP
      ## This is the network port where the Runner service will listen for connections.
      port: 8090
    ## Specifies the location and credentials for accessing the external PostgreSQL database.
    postgresql: { }
      ## Specifies the host address of the PostgreSQL database server.
      # host: "127.0.0.1"
      ## Defines the port on which the PostgreSQL server is listening.
      # port: 5432
      ## The username used for authentication with the PostgreSQL database.
      # user: "portal"
      ## The password used for authentication with the PostgreSQL database.
      ## It is empty by default for security reasons and should be set through secure means.
      # password: ""
      ## The name of the database to connect to on the PostgreSQL server.
      # database: "portal"
    ## Specifies the location and credentials for accessing the external Object Storage (OSS) service.
    objectStore: { }
      ## The endpoint URL of the object storage service.
      # endpoint: "http://127.0.0.1:9000"
      ## The access key ID for authentication with the object storage service.
      ## This is empty by default and should be provided securely.
      # accessKey: ""
      ## The secret access key for authentication with the object storage service.
      ## This is also empty by default and should be provided securely.
      # accessSecret: ""
      ## The name of the bucket within the object storage service to be used.
      # bucketName: "csghub-portal"
      ## The region where the bucket is located within the object storage service.
      # region: "cn-north-1"
      ## Indicates whether SSL should be used when connecting to the object storage service.
      # ssl: "false"

  ## Proxy configuration
  ## This section allows for the configuration of a proxy server, which can be used to route traffic or handle connections in specific ways.
  ## The section is empty, meaning no proxy settings have been defined.
  proxy:
    replicas: 1
    image:
      ## Specifies the location of the Runner Docker image in the Runner.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/csghub_server
      ## Defines the specific version of the Runner image to use.
      # tag: v1.2.0
      ## Determines how the image should be pulled from the Runner.
      pullPolicy: "IfNotPresent"
    ## List of image pull secrets.
    imagePullSecrets: [ ]
    service:
      ## This determines how the Runner service is accessed within the cluster or from external sources.
      type: ClusterIP
      ## This is the network port where the Runner service will listen for connections.
      port: 8083

  ## Nats configuration
  ## Configure internal NATS messaging system.
  nats:
    image:
      ## Specifies the location of the Nats Docker image in the registry.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/csghub_nats
      ## Defines the specific version of the Nats image to use.
      tag: 2.10.16
      ## Determines how the image should be pulled from the registry.
      pullPolicy: "IfNotPresent"
    ## List of image pull secrets.
    imagePullSecrets: [ ]
    service:
      ## This determines how the Nats service is accessed within the cluster or from external sources.
      type: ClusterIP
      ## This is the network port where the Nats service will listen for connections.
      ports:
        api: 4222
        cluster: 6222
        monitor: 8222
    ## Configuration for the persistence of NATS data.
    persistence:
      ## Specifies the StorageClass used for provisioning the volume.
      # storageClass: ""
      ## Defines the access modes of the volume.
      ## ReadWriteOnce means the volume can be mounted as read-write by a single node.
      # accessMode: [ "ReadWriteOnce" ]
      ## Specifies the size of the persistent volume.
      ## This should be adjusted based on expected usage and data growth over time.
      # size:  6Gi

  ## User Server configuration
  ## This section is intended for configurations related to the User Server, which manages user accounts, authentication, and authorization.
  ## As it stands, this section is empty, signifying that no custom configurations are set for the User Server.
  user:
    replicas: 1
    image:
      ## Specifies the location of the Server Docker image in the Server.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/csghub_server
      ## Defines the specific version of the Server image to use.
      # tag: v1.2.0
      ## Determines how the image should be pulled from the Server.
      pullPolicy: "IfNotPresent"
    ## List of image pull secrets.
    imagePullSecrets: [ ]
    service:
      ## This determines how the Server service is accessed within the cluster or from external sources.
      type: ClusterIP
      ## This is the network port where the Server service will listen for connections.
      port: 8080

  ## Accounting configuration
  ## This part of the configuration deals with accounting features, such as tracking resource usage and possibly billing.
  ## It is left blank in this template, indicating that no accounting configurations are currently applied.
  accounting:
    replicas: 1
    image:
      ## Specifies the location of the Accounting Docker image in the Accounting.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/csghub_server
      ## Defines the specific version of the Accounting image to use.
      # tag: v1.2.0
      ## Determines how the image should be pulled from the Accounting.
      pullPolicy: "IfNotPresent"
    ## List of image pull secrets.
    imagePullSecrets: [ ]
    service:
      ## This determines how the Accounting service is accessed within the cluster or from external sources.
      type: ClusterIP
      ## This is the network port where the Accounting service will listen for connections.
      port: 8086

  ## casdoor configuration
  ## Casdoor is an authentication system that can be integrated into this setup. This section would contain its configuration.
  ## Currently, there are no configurations set for Casdoor, as indicated by the empty section.
  casdoor:
    replicas: 1
    image:
      ## Specifies the location of the Runner Docker image in the Runner.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/casbin/casdoor
      ## Defines the specific version of the Runner image to use.
      # tag: v1.733.0
    ## Specifies the location and credentials for accessing the external PostgreSQL database.
    postgresql: { }
      ## Specifies the host address of the PostgreSQL database server.
      # host: "127.0.0.1"
      ## Defines the port on which the PostgreSQL server is listening.
      # port: 5432
      ## The username used for authentication with the PostgreSQL database.
      # user: "casdoor"
      ## The password used for authentication with the PostgreSQL database.
      ## It is empty by default for security reasons and should be set through secure means.
      # password: ""
      ## The name of the database to connect to on the PostgreSQL server.
      # database: "casdoor"

  mirror:
    image:
      ## Specifies the location of the Accounting Docker image in the Accounting.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/csghub_server
      ## Defines the specific version of the Accounting image to use.
      # tag: v1.2.0
      ## Determines how the image should be pulled from the Accounting.
      pullPolicy: "IfNotPresent"

  ## CoreDNS configuration
  ## This section is reserved for configuring CoreDNS, a flexible and extensible DNS server with a focus on service discovery.
  ## Currently, this section is left empty, indicating no specific configurations are applied to CoreDNS.
  coredns: { }
  # replicas: 1

  ## Kube Watcher configuration
  ## This is just only a watcher, do not modify anything
  watcher:
    image:
      ## Specifies the location of the Watcher Docker image in the Watcher.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/kube/watcher
      ## Defines the specific version of the Watcher image to use.
      tag: 1.1.1

  ## This configuration file outlines the deployment settings for a comprehensive software development platform.
  ## It includes configurations for various components such as Gitea, PostgreSQL, Redis, Minio, Docker Registry, CoreDNS, and more.
  ## Each section allows for customization to suit organizational needs, including security contexts, persistence settings, and service exposures.
  ## Ensure to review and adjust the settings according to your deployment environment and security policies.
  fluent:
    elasticsearch:
      host: "127.0.0.1"
      port: 9200
      index: "csghub"

  ## Temporal configuration
  ## This section configures the Temporal service, which is a workflow orchestration platform.
  ## Temporal allows for the management of complex workflows and ensures reliable execution of tasks.
  temporal:
    ingress:
      enabled: true  # Set to true to enable ingress for external access to the Temporal service.
    image:
      ## Specifies the location of the Docker image for the Temporal service.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/temporalio/auto-setup
      ## Defines the specific version of the Temporal image to use.
      tag: 1.25.1
    postgresql: { }
      ## The name of the database to be used for storing Temporal data.
      # database: "temporal"
      ## Optional: The name of the database for visibility data, if applicable.
      # databaseVisibility: ""
      ## The host address of the PostgreSQL database server.
      # host: ""
      ## The port on which the PostgreSQL server is listening.
      # port: 5432
      ## The username used for authenticating with the PostgreSQL database.
      # user: "temporal"
      ## The password used for authenticating with the PostgreSQL database.
    # password: ""
