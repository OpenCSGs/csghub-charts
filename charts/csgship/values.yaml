#################################################################
##  Global Configuration                                       ##
#################################################################
global:
  ## Ingress configuration
  ingress:
    # className: "nginx"            # Ingress controller class name
    domain: "example.cn"           # Base domain for accessing csghub
    useTop: false                   # Use top-level domain directly (true) or subdomain (false)
    ## TLS/SSL configuration
    tls:
      enabled: false                # Enable or disable TLS
      # secretName: ""              # TLS secret name (if enabled)
    ## Service configuration
    service:
      type: &type "LoadBalancer"    # Service type: LoadBalancer or NodePort

  ## Image management
  image:
    # registry: ""                  # Custom image registry (overrides local registry)
    tag: "v1.11.0"                  # Image tag format: {{version}}-{{edition}}
    pullPolicy: "IfNotPresent"      # Image pull policy: Always, IfNotPresent, Never
    pullSecrets: []                 # Private registry authentication secrets

  ## Persistent volume configuration
  persistence:
    # storageClass: ""              # StorageClass name (empty for default)
    accessModes: ["ReadWriteOnce"]  # Volume access modes
    size: "10Gi"                    # Default storage capacity

  ## Database configuration
  postgresql:
    ## Use built-in (true) or external (false)
    enabled: true
    ## External PostgreSQL connection
    external: {}
      # host: "<pg_host>"           # PostgreSQL host address
      # port: 6432                  # PostgreSQL port
      # user: "csghub"              # Database username
      # password: ""                # Database password
      # timezone: "Etc/UTC"         # Database timezone
      # sslmode: "prefer"           # SSL mode

  ## Redis configuration
  redis:
    ## Use built-in (true) or external (false)
    enabled: true
    ## External Redis configuration
    external: {}
      # host: "<redis_host>"        # Redis server hostname or IP
      # port: 6379                  # Redis port number
      # password: ""                # Redis authentication password

  ## subChart deployment context
  chartContext:
    isBuiltIn: false                # deployed bundled with csghub

#################################################################
##  CSGShip Configuration                                      ##
#################################################################
## External CSGHub URL for accessing the hub interface
externalUrl: "https://csghub.example.com"

## API token for authenticating with CSGHub API
hubAPIToken: ""

## Global image configuration
image:
  registry: "docker.io"                    # Docker registry
  repository: "opencsghq/csgship-web"
  tag: "v0.4.0"                            # Image version tag
  pullPolicy: "IfNotPresent"               # Image pull policy: Always, IfNotPresent, Never
  pullSecrets: []                          # Docker registry secrets

## Web Configuration
web:
  name: "csgship"

  ## Image settings (overrides global.image)
  image: {}

  ## Ingress configuration
  ingress:
    enabled: true                            # Enable or disable ingress
    annotations: {}                          # Ingress-nginx annotations
    tls: {}                                  # TLS settings for ingress
      # enabled: false                       # Enable or disable TLS
      # secretName: ""                       # TLS secret name (if enabled)

  ## GitLab OAuth configuration
  ## It should be a GitLab Applicaition with following info:
  ## Name: CSGShip
  ## Redirect URI: http://casdoor.example.com/callback
  ## Scope: read_user, openid, profile, email
  oauth: {}
    # issuer: "https://git-devops.opencsg.com"
    # clientId: "9c56ec399c70448b498a56c2dd3e2effb89453d4591a67ea98b4555f2a70b05e"
    # clientSecret: "gloas-3213761365be0a52bb5f5b92d5fbf4afe474afc6d2464f97dc2e1ae274d65b8b"

  ## Database configuration
  postgresql: {}
    # host: "<pg_host>"                    # PostgreSQL host address
    # port: 5432                           # PostgreSQL port
    # database: "csghub_label_studio"      # Database name
    # user: "csghub"                       # Database username
    # password: ""                         # Database password
    # timezone: "Etc/UTC"                  # Database timezone
    # sslmode: "prefer"                    # SSL mode

  ## Redis configuration
  redis: {}
    # host: "<redis_host>"                 # Redis server hostname or IP
    # port: 6379                           # Redis port number
    # password: ""                         # Redis authentication password

  persistence: {}
    # storageClass: ""                     # StorageClass for dynamic provisioning
    # accessModes: ["ReadWriteMany"]       # Volume access permissions
    # size: "10Gi"                         # Disk space allocation

## Agentic Configuration
agentic:
  image:
    repository: "opencsghq/csgship-agentic"
    tag: "v0.4.0"

## Billing Configuration
billing:
  image:
    repository: "opencsghq/csgship-billing"
    tag: "bl-2.0.1"

  ## Nats Configuration for billing
  nats: {}
    # host: "<nats_host>"         # Nats server hostname or IP
    # port: 6379                  # Nats port number
    # user: ""                    # Nats authentication user
    # password: ""                # Nats authentication password

## Frontend Configuration
frontend:
  image:
    repository: "opencsghq/csgship-portal"
    tag: "v1.2.1"

## MegaLinter Server Configuration
megalinterServer:
  image:
    repository: "oxsecurity/megalinter-server"
    tag: "beta"

## MegaLinter Worker Configuration
megalinterWorker:
  image:
    repository: "oxsecurity/megalinter-worker"
    tag: "v8.0.0"

## SecScan Configuration
secscan:
  image:
    repository: "opencsghq/csgship-secscan"
    tag: "sec-2.0.0"

#################################################################
##  Built-in Third-party Components                            ##
#################################################################
## Embedded PostgreSQL configuration
postgresql:
  image:
    registry: "docker.io"
    repository: "opencsghq/postgres"
    tag: "15.10"                             # Image version tag
    pullPolicy: "IfNotPresent"               # Image pull policy
    pullSecrets: []                          # Docker registry secrets

  service:
    type: "ClusterIP"                        # Service type: ClusterIP, NodePort, LoadBalancer
    port: 5432                               # Service port
    protocol: "TCP"                          # Network protocol

  databases:                                 # Databases to create on startup
    - "csgship_csgship"
    - "csgship_casdoor"

  parameters: {}                             # PostgreSQL runtime parameters
    # max_connections: 400                   # Dynamic parameters (triggers recreate)
    # shared_buffers: "128MB"                # Shared memory buffers

  persistence:
    # storageClass: ""                       # StorageClass for dynamic provisioning
    # accessModes: ["ReadWriteOnce"]         # Volume access permissions
    size: "50Gi"                             # Disk space allocation

## Built-in Redis configuration
redis:
  image:
    registry: "docker.io"
    repository: "redis"
    tag: "7.2.5"                             # Image version tag
    pullPolicy: "IfNotPresent"               # Image pull policy
    pullSecrets: []                          # Docker registry secrets

  service:
    type: "ClusterIP"                        # Service type: ClusterIP, NodePort, LoadBalancer
    port: 6379                               # Service port
    protocol: "TCP"                          # Network protocol

  requirePass: false                         # Password requirement

  persistence:
    # storageClass: ""                       # StorageClass for dynamic provisioning
    # accessModes: ["ReadWriteOnce"]         # Volume access permissions
    size: "10Gi"                             # Disk space allocation

## Built-in Casdoor configuration
casdoor:
  admin: {}                                  # Initial admin user
    # name: "root"                           # Admin username
    # password: ""                           # Admin password

  image:
    registry: "docker.io"
    repository: "casbin/casdoor"
    tag: "v1.799.0"                          # Image version tag
    pullPolicy: "IfNotPresent"               # Image pull policy
    pullSecrets: []                          # Docker registry secrets

  service:
    type: "ClusterIP"                        # Service type: ClusterIP, NodePort, LoadBalancer
    port: 8000                               # Service port
    protocol: "TCP"                          # Network protocol

  ingress:
    enabled: true                            # Enable or disable ingress
    annotations: {}                          # Ingress-nginx annotations
    tls: {}                                  # TLS settings
      # enabled: false                       # Enable or disable TLS
      # secretName: ""                       # TLS secret name

  postgresql: {}                             # Database configuration
    # host: "<pg_host>"                      # PostgreSQL host address
    # port: 5432                             # PostgreSQL port
    # database: "csghub_casdoor"             # Database name
    # user: "csghub"                         # Database username
    # password: ""                           # Database password
    # timezone: "Etc/UTC"                    # Database timezone
    # sslmode: "prefer"                      # SSL mode

#################################################################
##  Dependent SubCharts                                        ##
##  PLEASE DO NOT UPDATE!!!                                    ##
#################################################################
## Do not modify it unless you know the purpose of the modification.

## Ingress-nginx configuration
ingress-nginx:
  enabled: true                            # Enable NGINX Ingress Controller

  ## TCP services configuration
  tcp:
    22: "csghub/csghub-gitlab-shell:22"   # Forward TCP traffic on port 22

  controller:
    progressDeadlineSeconds: 600           # Deployment progress deadline

    ## Image configuration
    image:
      image: "opencsghq/ingress-nginx-controller"
      digest: ""                           # Image digest (do not update)

    ## Admission webhooks configuration
    admissionWebhooks:
      patch:
        image:
          image: "opencsghq/ingress-nginx-kube-webhook-certgen"
          digest: ""                       # Image digest (do not update)

    ## Controller configuration
    config:
      annotations-risk-level: "Critical"   # Risk level for annotations
      custom-http-errors: "404,500,502,503" # Custom HTTP error codes

    allowSnippetAnnotations: true          # Allow server snippets in annotations

    ## Service configuration
    service:
      type: *type                          # Service type
      nodePorts:
        http: 30080                        # HTTP node port
        https: 30443                       # HTTPS node port
        tcp:
          22: 30022                        # TCP node port for SSH

  ## Custom error pages configuration
  defaultBackend:
    enabled: true                          # Enable custom error pages
    image:
      image: "opencsghq/ingress-nginx-custom-error-pages"
      tag: "v1.2.0"
    extraVolumes:
      - name: "custom-error-pages"
        configMap:
          name: "ingress-nginx-custom-errors"
    extraVolumeMounts:
      - name: "custom-error-pages"
        mountPath: "/www"

## Reloader configuration
reloader:
  image:
    name: "opencsghq/stakater-reloader"    # Reloader image name
