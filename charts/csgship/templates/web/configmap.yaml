{{- /*
Copyright OpenCSG, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/ -}}

{{- $service := include "common.service" (dict "service" "web" "global" .) | fromYaml }}
{{- $serviceName := include "common.names.custom" (list . $service.name) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-init" $serviceName }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/service: {{ $service.name }}
    {{- include "common.labels" . | nindent 4 }}
data:
  initialize.sql: |
    -- LLM
    INSERT INTO platforms_llmmodel
      (id, provider, model, context_window, api_key, api_base, api_version, short_name)
    VALUES
      (1, 'custom', 'openai/data/models/deepseek-coder-33b-instruct-awq', 16000, 'dell-123', 'http://host:port/v1', '', '')
    ON CONFLICT (id) DO NOTHING;

    SELECT
    pg_catalog.setval('public.platforms_llmmodel_id_seq', (
            SELECT
                MAX(id)
            FROM public.platforms_llmmodel), TRUE);

    INSERT INTO platforms_llmsetting
      (id, feature, model_id)
    VALUES
      (1, '', 1),
      (2, 'ide', 1),
      (3, 'ide-chat', 1),
      (4, 'ide-code-completion', 1),
      (5, 'ide-codereview', 1)
    ON CONFLICT (id) DO NOTHING;

    SELECT
    pg_catalog.setval('public.platforms_llmsetting_id_seq', (
            SELECT
                MAX(id)
            FROM public.platforms_llmsetting), TRUE);

    -- Embedding
    INSERT INTO platforms_embeddingmodel
      (id, provider, model, dim, api_key, api_base, api_version)
    VALUES
      (1, 'custom', 'openai/jina-embeddings-v2-base-code', 768, 'dell-123', 'http://host:port/v1', '')
    ON CONFLICT (id) DO NOTHING;

    SELECT
    pg_catalog.setval('public.platforms_embeddingmodel_id_seq', (
            SELECT
                MAX(id)
            FROM public.platforms_embeddingmodel), TRUE);

    INSERT INTO platforms_embeddingsetting
      (id, feature, model_id)
    VALUES
      (1, '', 1),
      (2, 'ide', 1)
    ON CONFLICT (id) DO NOTHING;

    SELECT
    pg_catalog.setval('public.platforms_embeddingsetting_id_seq', (
            SELECT
                MAX(id)
            FROM public.platforms_embeddingsetting), TRUE);

    -- Casdoor
    INSERT INTO socialaccount_socialapp
      (id, provider, name, client_id, secret, key, provider_id, settings)
    VALUES
      (1, 'casdoor', 'casdoor', '922b009c161d8efb3422', 'f55bd1917a52a24080f831a31010157e50f17f5a', '', 'casdoor', '{"SCOPE": ["profile"]}')
    ON CONFLICT (id) DO NOTHING;

    SELECT
    pg_catalog.setval('public.socialaccount_socialapp_id_seq', (
            SELECT
                MAX(id)
            FROM public.socialaccount_socialapp), TRUE);

    -- point to django_site
    INSERT INTO socialaccount_socialapp_sites
      (id, socialapp_id, site_id)
    VALUES
      (2, 1, 1)
    ON CONFLICT (id) DO NOTHING;

    SELECT
    pg_catalog.setval('public.socialaccount_socialapp_sites_id_seq', (
            SELECT
                MAX(id)
            FROM public.socialaccount_socialapp_sites), TRUE);

    -- Change django_site to the correct domain
    UPDATE django_site
      SET domain = '{{ include "common.domain.webAPI" . }}', name = '{{ include "common.domain.webAPI" . }}' WHERE id = 1;

    -- Init Admin user
    INSERT INTO accounts_user
      (password, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined)
    VALUES
      (
        'pbkdf2_sha256$720000$ADQralA3c5ajFecfQBZONu$uNE3YstFZ3Ezq9LQGHyPsA2Lj/k6w4QlSpq5apqH6p4=',
        't', 'admin', '','', 'admin@example.com', 't', 't', now())
    ON CONFLICT (username) DO NOTHING;

    SELECT
    pg_catalog.setval('public.accounts_user_id_seq', (
            SELECT
                MAX(id)
            FROM public.accounts_user), TRUE);

  nginx.conf: |
    user root;
    # May be equal to `grep processor /proc/cpuinfo | wc -l`
    worker_processes auto;
    worker_cpu_affinity auto;

    # PCRE JIT can speed up processing of regular expressions significantly.
    pcre_jit on;

    # error_log
    error_log  /var/log/nginx/error.log notice;

    events {
        # Should be equal to `ulimit -n`
        worker_connections 1024;

        # Let each process accept multiple connections.
        multi_accept on;

        # Preferred connection method for newer linux versions.
        use epoll;
    }

    http {
        # Disables the “Server” response header
        server_tokens off;
        charset utf-8;

        # Sendfile copies data between one FD and other from within the kernel.
        # More efficient than read() + write(), since the requires transferring
        # data to and from the user space.
        sendfile on;

        # Tcp_nopush causes nginx to attempt to send its HTTP response head in one
        # packet, instead of using partial frames. This is useful for prepending
        # headers before calling sendfile, or for throughput optimization.
        tcp_nopush on;

        # Don't buffer data-sends (disable Nagle algorithm). Good for sending
        # frequent small bursts of data in real time.
        #
        tcp_nodelay on;

        # http://nginx.org/en/docs/hash.html
        types_hash_max_size 4096;
        default_type application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

        # Logging Settings
        access_log  /var/log/nginx/access.log  main;

        # Gzip Settings
        gzip on;
        gzip_disable "msie6";

        gzip_comp_level 6;
        # gzip_comp_level 9;
        gzip_min_length 1100;
        gzip_buffers 16 8k; gzip_proxied any;
        # gzip_http_version 1.1;
        gzip_types text/plain application/xml text/css text/js text/xml application/x-javascript text/javascript application/json application/xml+rss;

        keepalive_timeout 240;

        client_max_body_size 300M;

        # redirect http request to https
        #server {
        #    listen 80;
        #    server_name starchain.opencsg.com;
        #    rewrite  ^(.*)$  https://${server_name}$1 permanent;
        #}

        server {
            listen 80;
            server_name {{ include "common.domain.webAPI" . }};

            {{- $agenticSvc := include "common.service" (dict "service" "agentic" "global" .) | fromYaml }}
            {{- $agenticName := include "common.names.custom" (list . $agenticSvc.name) }}
            {{- $agenticPort := dig "service" "port" 8000 $agenticSvc }}
            location /agentic {
                proxy_pass {{ printf "http://%s:%v" $agenticName $agenticPort }};
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Host $server_name;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 300s;
                proxy_send_timeout 300s;
                proxy_read_timeout 300s;

                # For streaming API (event-stream)
                proxy_buffering off;
                proxy_cache off;
            }

            {{- $webSvc:= include "common.service" (dict "service" "web" "global" .) | fromYaml }}
            {{- $webName := include "common.names.custom" (list . $webSvc.name) }}
            {{- $webPort := dig "service" "port" 8000 $webSvc }}
            location / {
                proxy_pass {{ printf "http://%s:%v" $webName $webPort }};
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Host $server_name;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 300s;
                proxy_send_timeout 300s;
                proxy_read_timeout 300s;

                # For streaming API (event-stream)
                proxy_buffering off;
                proxy_cache off;
            }


            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
                root html;
            }
        }
    }
