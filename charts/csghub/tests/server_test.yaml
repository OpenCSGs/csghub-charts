suite: Test Server Resources
templates:
  - csghub/server/configmap.yaml
  - csghub/server/job.yaml
  - csghub/server/service.yaml
  - csghub/server/deployment.yaml
release:
  name: csghub
  namespace: csghub
set:
  global:
    image:
      registry: ""
      pullPolicy: "Never"
      pullSecrets: ["acr-pull-secret"]
    postgresql:
      enabled: true
  image:
    registry: "ghcr.io"
    repository: "opencsghq/csghub-server"
    tag: "v1.11.0"
    pullPolicy: ""
  server:
    image: {}
  redis:
    image:
      repository: "redis"
      tag: "7.2.5"
tests:
  - it: Should render configmap correctly
    template: csghub/server/configmap.yaml
    asserts:
      - equal:
          path: metadata.name
          value: "csghub-server"
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "server"
      - isNotNullOrEmpty:
          path: data

  - it: Should render job correctly
    template: csghub/server/job.yaml
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: "wait-for-server"
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: "ghcr.io/busybox:latest"
      - matchRegex:
          path: spec.template.spec.initContainers[0].command[2]
          pattern: "csghub-server:.*/healthz"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "ghcr.io/opencsghq/psql:latest"
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            configMapRef:
              name: csghub-core
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: init-scripts
            mountPath: /scripts
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: init-scripts
            configMap:
              defaultMode: 0744
              name: csghub-server


  - it: Should render service correctly
    template: csghub/server/service.yaml
    set:
      server:
        name: "server-test"
        service:
          port: 8081
    asserts:
      - equal:
          path: metadata.name
          value: "csghub-server-test"
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "server-test"
      - equal:
          path: spec.ports[0]
          value:
            port: 8081
            targetPort: 8080
            protocol: TCP
            name: server-test

  - it: Should render deployment with global correctly
    template: csghub/server/deployment.yaml
    asserts:
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "server"
      - equal:
          path: spec.selector.matchLabels["app.kubernetes.io/service"]
          value: "server"
      - equal:
          path: spec.template.metadata.labels["app.kubernetes.io/service"]
          value: "server"
      - equal:
          path: metadata.annotations["reloader.stakater.com/auto"]
          value: "true"
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: "acr-pull-secret"
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: "docker.io/redis:7.2.5"
      - equal:
          path: spec.template.spec.initContainers[1].image
          value: "ghcr.io/opencsghq/psql:latest"
      - equal:
          path: spec.template.spec.initContainers[2].image
          value: "ghcr.io/busybox:latest"
      - matchRegex:
          path: spec.template.spec.initContainers[3].command[2]
          pattern: "http://csghub-nats:8222/healthz"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "ghcr.io/opencsghq/csghub-server:v1.11.0-ee"
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: "Never"
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: jwt-token-cert
            mountPath: /starhub-bin/casdoor

  - it: Should render deployment with local correctly
    template: csghub/server/deployment.yaml
    set:
      global:
        image:
          registry: "opencsg-registry.cn-beijing.cr.aliyuncs.com"
      server:
        image:
          pullPolicy: "IfNotPresent"
          pullSecrets: ["docker-pull-secret"]
        nodeSelector:
          diskType: ssd
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: "docker-pull-secret"
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: "opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsghq/redis:7.2.5"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsghq/csghub-server:v1.11.0-ee"
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: "IfNotPresent"
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            configMapRef:
              name: csghub-core
      - equal:
          path: spec.template.spec.nodeSelector.diskType
          value: "ssd"
      - equal:
          path: spec.template.spec.initContainers[2].image
          value: "opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsghq/busybox:latest"
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: "opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsghq/redis:7.2.5"
      - equal:
          path: spec.template.spec.initContainers[1].image
          value: "opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsghq/psql:latest"
