suite: Test Redis Resources
templates:
  - redis/secret.yaml
  - redis/service.yaml
  - redis/statefulset.yaml
release:
  name: csghub
  namespace: csghub
set:
  global:
    image:
      registry: ""
      pullPolicy: "Never"
      pullSecrets: ["acr-pull-secret"]
    persistence:
      storageClass: "nfs-provisioner"
      accessModes: ["ReadWriteOnce", "ReadWriteMany"]
      size: "25Gi"
    redis:
      enabled: true
  redis:
    name: "redis"
    image:
      registry: "docker.io"
      repository: "redis"
      tag: "8.0.0"
      pullPolicy: ""
    service:
      type: "NodePort"
      port: 6378
      protocol: TCP
    persistence:
      size: ""
tests:
  - it: Should render secret correctly
    template: redis/secret.yaml
    set:
      redis:
        requirePass: true
    asserts:
      - equal:
          path: metadata.name
          value: "csghub-redis"
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "redis"
      - matchRegex:
          path: data["REDIS_PASSWD"]
          pattern: "^[A-Za-z0-9+/=]{44}$"

  - it: Should render service correctly
    template: redis/service.yaml
    asserts:
      - equal:
          path: metadata.name
          value: "csghub-redis"
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "redis"
      - equal:
          path: spec.selector["app.kubernetes.io/service"]
          value: "redis"
      - equal:
          path: spec.type
          value: "NodePort"
      - equal:
          path: spec.ports[0].port
          value: 6378
      - equal:
          path: spec.ports[0].protocol
          value: "TCP"
      - equal:
          path: spec.ports[0].name
          value: "redis"

  - it: Should render deployment with global correctly
    template: redis/statefulset.yaml
    asserts:
      - equal:
          path: metadata.name
          value: "csghub-redis"
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "redis"
      - equal:
          path: spec.selector.matchLabels["app.kubernetes.io/service"]
          value: "redis"
      - equal:
          path: spec.template.metadata.labels["app.kubernetes.io/service"]
          value: "redis"
      - equal:
          path: metadata.annotations["reloader.stakater.com/auto"]
          value: "true"
      - equal:
          path: spec.serviceName
          value: "csghub-redis"
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: "acr-pull-secret"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "docker.io/redis:8.0.0"
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: "Never"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.accessModes
          value: ["ReadWriteOnce", "ReadWriteMany"]
      - equal:
          path: spec.volumeClaimTemplates[0].spec.storageClassName
          value: "nfs-provisioner"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.resources.requests.storage
          value: "25Gi"

  - it: Should render statefulset with local correctly
    template: redis/statefulset.yaml
    set:
      global:
        image:
          registry: "opencsg-registry.cn-beijing.cr.aliyuncs.com"
      redis:
        image:
          pullPolicy: "IfNotPresent"
          pullSecrets: ["docker-pull-secret"]
        persistence:
          accessModes: ["ReadWriteOnce"]
          storageClass: "hostPath"
          size: "5Gi"
        nodeSelector:
          diskType: ssd
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: "docker-pull-secret"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsghq/redis:8.0.0"
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: "IfNotPresent"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.accessModes
          value: ["ReadWriteOnce"]
      - equal:
          path: spec.volumeClaimTemplates[0].spec.storageClassName
          value: "hostPath"
      - equal:
          path: spec.template.spec.nodeSelector.diskType
          value: "ssd"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.resources.requests.storage
          value: "5Gi"
