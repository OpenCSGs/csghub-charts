suite: Test Registry Resources
templates:
  - registry/configmap.yaml
  - registry/ingress.yaml
  - registry/secret.yaml
  - registry/service.yaml
  - registry/deployment.yaml
release:
  name: csghub
  namespace: csghub
set:
  global:
    ingress:
      enabled: true
      domain: example.cn
      tls:
        enabled: true
        secretName: "example-cn-tls"
      service:
        type: LoadBalancer
    image:
      registry: ""
      pullPolicy: "Never"
      pullSecrets: ["acr-pull-secret"]
    objectStore:
      enabled: true
      external:
        endpoint: "https://s3.example.com"
        accessKey: "testUser"
        secretKey: "testPassword"
        region: "es-west-1"
        encrypt: false
        secure: true
        pathStyle: true
  registry:
    name: "registry"
    image:
      registry: "docker.io"
      repository: "registry"
      tag: "2.8.5"
      pullPolicy: ""
    service:
      type: "ClusterIP"
      port: 5001
      protocol: TCP
    ingress:
      enabled: true
tests:
  - it: Should render all resources correctly
    templates:
      - registry/configmap.yaml
      - registry/ingress.yaml
      - registry/secret.yaml
      - registry/service.yaml
      - registry/deployment.yaml
    asserts:
      - equal:
          path: metadata.name
          value: "csghub-registry"
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "registry"

  - it: Should render configmap correctly
    template: registry/configmap.yaml
    asserts:
      - equal:
          path: data.REGISTRY_AUTH
          value: "htpasswd"
      - equal:
          path: data.REGISTRY_AUTH_HTPASSWD_REALM
          value: "Registry Realm"
      - equal:
          path: data.REGISTRY_AUTH_HTPASSWD_PATH
          value: "/auth/htpasswd"
      - equal:
          path: data.REGISTRY_STORAGE
          value: "s3"
      - equal:
          path: data.REGISTRY_STORAGE_S3_REGIONENDPOINT
          value: "http://csghub-minio:9000"
      - equal:
          path: data.REGISTRY_STORAGE_S3_ACCESSKEY
          value: "minio"
      - matchRegex:
          path: data.REGISTRY_STORAGE_S3_SECRETKEY
          pattern: "^[A-Za-z0-9+/=]{32}$"
      - equal:
          path: data.REGISTRY_STORAGE_S3_REGION
          value: "cn-north-1"
      - equal:
          path: data.REGISTRY_STORAGE_S3_BUCKET
          value: "csghub-registry"
      - equal:
          path: data.REGISTRY_STORAGE_S3_ENCRYPT
          value: "false"
      - equal:
          path: data.REGISTRY_STORAGE_S3_SECURE
          value: "true"
      - equal:
          path: data.REGISTRY_STORAGE_S3_FORCEPATHSTYLE
          value: "true"

  - it: Should render configmap correctly with external object storage
    template: registry/configmap.yaml
    set:
      global:
        objectStore:
          enabled: false
    asserts:
      - equal:
          path: data.REGISTRY_AUTH
          value: "htpasswd"
      - equal:
          path: data.REGISTRY_AUTH_HTPASSWD_REALM
          value: "Registry Realm"
      - equal:
          path: data.REGISTRY_AUTH_HTPASSWD_PATH
          value: "/auth/htpasswd"
      - equal:
          path: data.REGISTRY_STORAGE
          value: "s3"
      - equal:
          path: data.REGISTRY_STORAGE_S3_REGIONENDPOINT
          value: "https://s3.example.com"
      - equal:
          path: data.REGISTRY_STORAGE_S3_ACCESSKEY
          value: "testUser"
      - equal:
          path: data.REGISTRY_STORAGE_S3_SECRETKEY
          value: "testPassword"
      - equal:
          path: data.REGISTRY_STORAGE_S3_REGION
          value: "es-west-1"
      - equal:
          path: data.REGISTRY_STORAGE_S3_BUCKET
          value: "csghub-registry"
      - equal:
          path: data.REGISTRY_STORAGE_S3_ENCRYPT
          value: "false"
      - equal:
          path: data.REGISTRY_STORAGE_S3_SECURE
          value: "true"
      - equal:
          path: data.REGISTRY_STORAGE_S3_FORCEPATHSTYLE
          value: "true"

  - it: Should render ingress correctly
    template: registry/ingress.yaml
    asserts:
      - contains:
          path: spec.tls[0].hosts
          content: "registry.example.cn"
      - equal:
          path: spec.tls[0].secretName
          value: "example-cn-tls"
      - equal:
          path: spec.rules[0].host
          value: "registry.example.cn"
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: "csghub-registry"
      - equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 5001

  - it: Should render secret correctly
    template: registry/secret.yaml
    asserts:
      - equal:
          decodeBase64: true
          path: data.REGISTRY_USERNAME
          value: "registry"
      - matchRegex:
          path: data.REGISTRY_PASSWORD
          pattern: "^[A-Za-z0-9+/=]{44}$"

  - it: Should render service correctly
    template: registry/service.yaml
    set:
      registry:
        console:
          enabled: true
    asserts:
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "registry"
      - equal:
          path: spec.selector["app.kubernetes.io/service"]
          value: "registry"
      - equal:
          path: spec.type
          value: "ClusterIP"
      - equal:
          path: spec.ports[0].port
          value: 5001

  - it: Should render deployment with global correctly
    template: registry/deployment.yaml
    asserts:
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "registry"
      - equal:
          path: spec.selector.matchLabels["app.kubernetes.io/service"]
          value: "registry"
      - equal:
          path: spec.template.metadata.labels["app.kubernetes.io/service"]
          value: "registry"
      - equal:
          path: metadata.annotations["reloader.stakater.com/auto"]
          value: "true"
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: "acr-pull-secret"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "docker.io/registry:2.8.5"
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: "Never"

  - it: Should render deployment with local correctly
    template: registry/deployment.yaml
    set:
      global:
        image:
          registry: "opencsg-registry.cn-beijing.cr.aliyuncs.com"
      registry:
        image:
          pullPolicy: "IfNotPresent"
          pullSecrets: ["docker-pull-secret"]
        nodeSelector:
          diskType: ssd
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: "docker-pull-secret"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsghq/registry:2.8.5"
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: "IfNotPresent"
      - equal:
          path: spec.template.spec.nodeSelector.diskType
          value: "ssd"
