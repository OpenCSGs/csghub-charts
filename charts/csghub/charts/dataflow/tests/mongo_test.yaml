suite: Test MongoDB Resources
templates:
  - mongo/secret.yaml
  - mongo/service.yaml
  - mongo/statefulset.yaml
release:
  name: csghub
  namespace: csghub
set:
  global:
    image:
      registry: ""
      pullPolicy: "Never"
      pullSecrets: ["acr-pull-secret"]
    persistence:
      storageClass: "nfs-provisioner"
      accessModes: ["ReadWriteOnce"]
      size: "25Gi"
    postgresql:
      enabled: true
  mongo:
    name: "mongo"
    image:
      registry: "docker.io"
      repository: "opencsghq/mongo"
      tag: "8.0.13"
      pullPolicy: ""
    service:
      type: "ClusterIP"
      port: 27017
      protocol: TCP
    auth:
      user: "testUser"
      password: "testPassword"
    persistence:
      size: ""
tests:
  - it: Should render secret correctly
    template: mongo/secret.yaml
    asserts:
      - equal:
          path: metadata.name
          value: "csghub-mongo"
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "mongo"
      - equal:
          decodeBase64: true
          path: data["MONGO_INITDB_ROOT_USERNAME"]
          value: "testUser"
      - equal:
          decodeBase64: true
          path: data["MONGO_INITDB_ROOT_PASSWORD"]
          value: "testPassword"

  - it: Should render service correctly
    template: mongo/service.yaml
    asserts:
      - equal:
          path: metadata.name
          value: "csghub-mongo"
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "mongo"
      - equal:
          path: spec.selector["app.kubernetes.io/service"]
          value: "mongo"
      - equal:
          path: spec.type
          value: "ClusterIP"
      - equal:
          path: spec.ports[0].port
          value: 27017
      - equal:
          path: spec.ports[0].protocol
          value: "TCP"
      - equal:
          path: spec.ports[0].name
          value: "mongo"

  - it: Should render statefulset with global correctly
    template: mongo/statefulset.yaml
    asserts:
      - equal:
          path: metadata.name
          value: "csghub-mongo"
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "mongo"
      - equal:
          path: spec.selector.matchLabels["app.kubernetes.io/service"]
          value: "mongo"
      - equal:
          path: spec.template.metadata.labels["app.kubernetes.io/service"]
          value: "mongo"
      - equal:
          path: metadata.annotations["reloader.stakater.com/auto"]
          value: "true"
      - equal:
          path: spec.serviceName
          value: "csghub-mongo"
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: "acr-pull-secret"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "docker.io/opencsghq/mongo:8.0.13"
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: "Never"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.accessModes
          value: ["ReadWriteOnce"]
      - equal:
          path: spec.volumeClaimTemplates[0].spec.storageClassName
          value: "nfs-provisioner"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.resources.requests.storage
          value: "25Gi"

  - it: Should render statefulset with local correctly
    template: mongo/statefulset.yaml
    set:
      global:
        image:
          registry: "opencsg-registry.cn-beijing.cr.aliyuncs.com"
      mongo:
        image:
          pullPolicy: "IfNotPresent"
          pullSecrets: ["docker-pull-secret"]
        persistence:
          accessModes: ["ReadWriteOnce"]
          storageClass: "hostPath"
          size: "20Gi"
        nodeSelector:
          diskType: ssd
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: "docker-pull-secret"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsghq/mongo:8.0.13"
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: "IfNotPresent"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.accessModes
          value: ["ReadWriteOnce"]
      - equal:
          path: spec.volumeClaimTemplates[0].spec.storageClassName
          value: "hostPath"
      - equal:
          path: spec.template.spec.nodeSelector.diskType
          value: "ssd"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.resources.requests.storage
          value: "20Gi"
