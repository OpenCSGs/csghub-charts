suite: Test Dataflow Resources
templates:
  - dataflow/configmap.yaml
  - dataflow/ingress.yaml
  - dataflow/service.yaml
  - dataflow/deployment.yaml
  - dataflow/statefulset.yaml
release:
  name: csghub
  namespace: csghub
set:
  global:
    ingress:
      domain: "example.cn"
      tls:
        enabled: true
        secretName: "test-tls"
    image:
      registry: ""
      pullPolicy: "Never"
      pullSecrets: ["acr-pull-secret"]
    persistence:
      storageClass: "nfs-provisioner"
      accessModes: ["ReadWriteMany"]
      size: "25Gi"
    postgresql:
      enabled: true
    chartContext:
      isBuiltIn: false
  externalUrl: "https://csghub.example.com"
  dataflow:
    name: "dataflow"
    image:
      registry: "docker.io"
      repository: "opencsghq/dataflow"
      tag: "20250930"
      pullPolicy: ""
    service:
      type: "ClusterIP"
      port: 8088
      protocol: TCP
    persistence:
      size: ""
  postgresql:
    name: "postgresql"
    service:
      port: 5432
  mongo:
    name: "mongo"
    service:
      port: 27017
tests:
  - it: Should render configmap correctly
    template: dataflow/configmap.yaml
    asserts:
      - equal:
          path: metadata.name
          value: "csghub-dataflow"
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "dataflow"
      - equal:
          path: data["CSGHUB_ENDPOINT"]
          value: "https://csghub.example.com"
      - equal:
          path: data["DATABASE_HOSTNAME"]
          value: "csghub-postgresql"
      - equal:
          path: data["DATABASE_PORT"]
          value: "5432"
      - equal:
          path: data["DATABASE_DB"]
          value: "csghub_dataflow"
      - equal:
          path: data["DATABASE_USERNAME"]
          value: "csghub"
      - matchRegex:
          path: data["DATABASE_PASSWORD"]
          pattern: ".{32}"
      - equal:
          path: data["STUDIO_JUMP_URL"]
          value: "https://label-studio.example.cn"
      - equal:
          path: data["REDIS_HOST_URL"]
          value: "redis://csghub-redis:6379"
      - matchRegex:
          path: data["MONG_HOST_URL"]
          pattern: "mongodb://root:.{32}@csghub-mongo:27017"

  - it: Should render configmap correctly with external postgresql, redis, mongo
    template: dataflow/configmap.yaml
    set:
      global:
        postgresql:
          enabled: false
        redis:
          enabled: false
        mongo:
          enabled: false
        chartContext:
          isBuiltIn: true
      dataflow:
        postgresql:
          host: "10.6.0.10"
          port: 6432
          database: "postgres"
          user: "postgres"
          password: "postgres"
        redis:
          host: "10.6.0.11"
          port: 6380
        mongo:
          host: "10.6.0.12"
          port: 27018
          user: "mongo"
          password: "mongo"
    asserts:
      - equal:
          path: data["CSGHUB_ENDPOINT"]
          value: "https://csghub.example.cn"
      - equal:
          path: data["DATABASE_HOSTNAME"]
          value: "10.6.0.10"
      - equal:
          path: data["DATABASE_PORT"]
          value: "6432"
      - equal:
          path: data["DATABASE_DB"]
          value: "postgres"
      - equal:
          path: data["DATABASE_USERNAME"]
          value: "postgres"
      - matchRegex:
          path: data["DATABASE_PASSWORD"]
          pattern: "postgres"
      - equal:
          path: data["REDIS_HOST_URL"]
          value: "redis://10.6.0.11:6380"
      - equal:
          path: data["MONG_HOST_URL"]
          value: "mongodb://mongo:mongo@10.6.0.12:27018"

  - it: Should render ingress correctly
    template: dataflow/ingress.yaml
    asserts:
      - equal:
          path: metadata.name
          value: "csghub-dataflow"
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "dataflow"
      - equal:
          path: spec.tls[0].hosts[0]
          value: "dataflow.example.cn"
      - equal:
          path: spec.tls[0].secretName
          value: "test-tls"

  - it: Should render service correctly
    template: dataflow/service.yaml
    asserts:
      - equal:
          path: metadata.name
          value: "csghub-dataflow"
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "dataflow"
      - equal:
          path: spec.selector["app.kubernetes.io/service"]
          value: "dataflow"
      - equal:
          path: spec.type
          value: "ClusterIP"
      - equal:
          path: spec.ports[0].port
          value: 8088
      - equal:
          path: spec.ports[0].protocol
          value: "TCP"
      - equal:
          path: spec.ports[0].name
          value: "dataflow"

  - it: Should render statefulset with global correctly
    template: dataflow/statefulset.yaml
    asserts:
      - equal:
          path: metadata.name
          value: "csghub-dataflow"
      - equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "dataflow"
      - equal:
          path: spec.selector.matchLabels["app.kubernetes.io/service"]
          value: "dataflow"
      - equal:
          path: spec.template.metadata.labels["app.kubernetes.io/service"]
          value: "dataflow"
      - equal:
          path: metadata.annotations["reloader.stakater.com/auto"]
          value: "true"
      - equal:
          path: spec.serviceName
          value: "csghub-dataflow"
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: "acr-pull-secret"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "docker.io/opencsghq/dataflow:20250930"
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: "Never"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.accessModes
          value: ["ReadWriteMany"]
      - equal:
          path: spec.volumeClaimTemplates[0].spec.storageClassName
          value: "nfs-provisioner"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.resources.requests.storage
          value: "25Gi"

  - it: Should render statefulset with local correctly
    template: dataflow/statefulset.yaml
    set:
      global:
        image:
          registry: "opencsg-registry.cn-beijing.cr.aliyuncs.com"
      dataflow:
        image:
          pullPolicy: "IfNotPresent"
          pullSecrets: ["docker-pull-secret"]
        persistence:
          accessModes: ["ReadWriteMany"]
          storageClass: "hostPath"
          size: "20Gi"
        nodeSelector:
          diskType: ssd
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: "docker-pull-secret"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsghq/dataflow:20250930"
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: "IfNotPresent"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.accessModes
          value: ["ReadWriteMany"]
      - equal:
          path: spec.volumeClaimTemplates[0].spec.storageClassName
          value: "hostPath"
      - equal:
          path: spec.template.spec.nodeSelector.diskType
          value: "ssd"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.resources.requests.storage
          value: "20Gi"

  - it: Should render deployment with local correctly
    template: dataflow/deployment.yaml
    set:
      global:
        image:
          registry: "opencsg-registry.cn-beijing.cr.aliyuncs.com"
      dataflow:
        image:
          pullPolicy: "IfNotPresent"
          pullSecrets: ["docker-pull-secret"]
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: "docker-pull-secret"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsghq/dataflow:20250930"
      - equal:
          path: spec.template.spec.volumes[0].persistentVolumeClaim.claimName
          value: "data-csghub-dataflow-0"
