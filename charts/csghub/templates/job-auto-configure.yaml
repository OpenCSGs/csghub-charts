{{- /*
Copyright OpenCSG, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

{{- if and .Values.global.deploy.enabled .Values.global.deploy.autoConfigure }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "common.names.custom" (list . "auto-configure") }}
  namespace: {{ .Release.Namespace }}
  labels: {{ include "common.labels" (dict "context" . "service" "auto-configure") | nindent 4 }}
  annotations:
    helm.sh/hook: post-install, post-upgrade
    helm.sh/hook-weight: "2"
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  ttlSecondsAfterFinished: 1200
  backoffLimit: 4
  activeDeadlineSeconds: 600
  template:
    metadata:
      name: {{ include "common.names.custom" (list . "runner") }}
      labels: {{ include "common.labels" (dict "context" . "service" "auto-configure") | nindent 8 }}
    spec:
      {{- if .Values.csghub.server.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.custom" (list . "runner") }}
      automountServiceAccountToken: {{ .Values.csghub.server.serviceAccount.automount }}
      {{- end }}
      restartPolicy: OnFailure
      {{- with (or .Values.global.image.pullSecrets .Values.csghub.server.image.pullSecrets) }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      containers:
        - name: resource-verify
          image: {{ include "image.fixed.prefix" (list . "opencsghq/toolbox:1.2.4") }}
          imagePullPolicy: {{ .Values.csghub.server.image.pullPolicy }}
          command:
            - "/bin/sh"
            - "-c"
            - |
              for config in /.kube/config*; do
                echo "Resource Verify for Cluster $config: "
                /opt/csghub/bin/kyml -file /yamls -kubeconfig "$config" -create
              done
          volumeMounts:
            - name: kube-configs
              mountPath: /.kube
            - name: argo
              mountPath: /yamls/argo
            - name: knative
              mountPath: /yamls/knative
            - name: lws
              mountPath: /yamls/lws
        - name: gpu-gather
          {{- $repository := printf "%s:%s" .Values.csghub.runner.autoLabel.image.repository .Values.csghub.runner.autoLabel.image.tag }}
          image: {{ include "image.fixed.prefix" (list . $repository) }}
          imagePullPolicy: {{ .Values.csghub.server.image.pullPolicy }}
          args: [ "-d", "/.kube", "-n", "default", "-i", "{{ include "image.fixed.prefix" (list . .Values.csghub.runner.autoLabel.cli.image) }}", "-c", "{{ .Values.csghub.runner.autoLabel.cli.cmd }}" ]
          volumeMounts:
            - name: kube-configs
              mountPath: /.kube
          envFrom:
            - configMapRef:
                name: {{ include "common.names.custom" (list . "server") }}
          env:
            - name: PGHOST
              value: "$(STARHUB_DATABASE_HOST)"
            - name: PGPORT
              value: "$(STARHUB_DATABASE_PORT)"
            - name: PGDATABASE
              value: "$(STARHUB_DATABASE_NAME)"
            - name: PGUSER
              value: "$(STARHUB_DATABASE_USERNAME)"
            - name: PGPASSWORD
              value: "$(STARHUB_DATABASE_PASSWORD)"
      volumes:
        - name: kube-configs
          secret:
            secretName: {{ .Values.global.deploy.kubeSecret }}
        - name: argo
          configMap:
            name: {{ include "common.names.custom" (list . "runner-argo") }}
        - name: knative
          configMap:
            name: {{ include "common.names.custom" (list . "runner-knative") }}
        - name: lws
          configMap:
            name: {{ include "common.names.custom" (list . "runner-lws") }}
{{- end }}
