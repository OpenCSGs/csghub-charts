{{- /*
Copyright OpenCSG, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/ -}}

{{- $service := include "common.service" (dict "service" "casdoor" "global" .) | fromYaml }}
{{- $serviceName := include "common.names.custom" (list . $service.name) }}
{{- $pgConfig := include "common.postgresql.config" (dict "service" $service "global" .) | fromYaml }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $serviceName }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/service: {{ $service.name }}
    {{- if $service.labels }}
      {{- toYaml $service.labels | nindent 4 }}
    {{- else }}
      {{- include "common.labels" . | nindent 4 }}
    {{- end }}
  annotations:
    reloader.stakater.com/auto: "true"
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation
    {{- if $service.annotations }}
      {{- toYaml $service.annotations | nindent 4 }}
    {{- end }}
spec:
  parallelism: 1
  completions: 1
  activeDeadlineSeconds: 1200
  backoffLimit: 5
  ttlSecondsAfterFinished: 300
  completionMode: "Indexed"
  template:
    metadata:
      labels:
        app.kubernetes.io/service: {{ $service.name }}
        {{- if $service.podLabels }}
          {{- toYaml $service.podLabels | nindent 8 }}
        {{- else }}
          {{- include "common.labels" . | nindent 8 }}
        {{- end }}
      annotations:
      {{- if $service.podAnnotations }}
        {{- toYaml $service.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
      restartPolicy: "OnFailure"
      terminationGracePeriodSeconds: {{ $service.terminationGracePeriodSeconds | default 30 }}
      {{- if $service.serviceAccountName }}
      serviceAccountName: {{ $service.serviceAccountName }}
      automountServiceAccountToken: {{ $service.automountServiceAccountToken | default true }}
      {{- end }}
      {{- with (or $service.image.pullSecrets .Values.global.image.pullSecrets) }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      initContainers:
        {{- include "wait-for-casdoor" . | nindent 8 }}
      containers:
        - name: {{ $service.name }}
          image: {{ include "common.image.fixed" (dict "ctx" . "service" "casdoor" "image" "opencsghq/psql:latest") }}
          imagePullPolicy: {{ or $service.image.pullPolicy .Values.global.image.pullPolicy }}
          command:
            - "/bin/sh"
            - "-c"
            - |
              for sql_file in /scripts/*.sql;
              do
                echo Executing $$sql_file;
                psql \
                  -v external_endpoint="'$EXTERNAL_ENDPOINT'" \
                  -v csgship_external_endpoint="'$CSGSHIP_EXTERNAL_ENDPOINT'" \
                  -v htpasswd="'$INIT_ADMIN_HTPASSWD'" \
                  -v oauth_client_id="'$OAUTH_CLIENT_ID'" \
                  -v oauth_client_secret="'$OAUTH_CLIENT_SECRET'" \
                  -v oauth_issuer="'$OAUTH_ISSUER'" \
                  -v csghub_client_id="'$CSGHUB_CLIENT_ID'" \
                  -v csghub_client_secret="'$CSGHUB_CLIENT_SECRET'" \
                  -v csgship_client_id="'$CSGSHIP_CLIENT_ID'" \
                  -v csgship_client_secret="'$CSGSHIP_CLIENT_SECRET'" \
                  -f $$sql_file;
              done
          envFrom:
            - configMapRef:
                name: {{ include "common.names.custom" (list . "core") }}
            {{- if .Values.csgship.enabled }}
            - configMapRef:
                name: {{ .Values.csgship.configmap | default (include "common.names.custom" (list . "csgship")) }}
            {{- end }}
            - secretRef:
                name: {{ printf "%s-init" $serviceName }}
          env:
            - name: EXTERNAL_ENDPOINT
              value: {{ include "common.endpoint.csghub" . | quote }}
            - name: PGHOST
              value: {{ $pgConfig.host | quote }}
            - name: PGPORT
              value: {{ $pgConfig.port | quote }}
            - name: PGDATABASE
              value: {{ $pgConfig.database | quote }}
            - name: PGUSER
              value: {{ $pgConfig.user | quote }}
            - name: PGPASSWORD
              value: {{ $pgConfig.password | quote }}
            - name: CSGHUB_CLIENT_ID
              value: "$(STARHUB_SERVER_CASDOOR_CLIENT_ID)"
            - name: CSGHUB_CLIENT_SECRET
              value: "$(STARHUB_SERVER_CASDOOR_CLIENT_SECRET)"
            {{- if .Values.csgship.enabled }}
            - name: CSGSHIP_EXTERNAL_ENDPOINT
              value: {{ include "common.endpoint.web" . | quote }}
            {{- $webSvc := include "common.service" (dict "service" "web" "global" .) | fromYaml }}
            - name: OAUTH_CLIENT_ID
              value: {{ dig "oauth" "clientId" "" $webSvc | quote }}
            - name: OAUTH_CLIENT_SECRET
              value: {{ dig "oauth" "clientSecret" "" $webSvc | quote }}
            - name: OAUTH_ISSUER
              value: {{ dig "oauth" "issuer" "https://gitlab.example.com" $webSvc | quote }}
            - name: CSGSHIP_CLIENT_ID
              value: "$(CASDOOR_CLIENT_ID)"
            - name: CSGSHIP_CLIENT_SECRET
              value: "$(CASDOOR_SECRET_KEY)"
            {{- end }}
            {{- with $service.environments }}
            {{- range $key, $value := . }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          {{- if $service.resources }}
          resources:
            {{- toYaml $service.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: update-conf
              mountPath: /scripts
          {{- if $service.livenessProbe }}
          livenessProbe:
            {{- toYaml $service.livenessProbe | nindent 12 }}
          {{- end }}
          {{- if $service.readinessProbe }}
          readinessProbe:
            {{- toYaml $service.readinessProbe | nindent 12 }}
          {{- end }}
          {{- if $service.startupProbe }}
          startupProbe:
            {{- toYaml $service.startupProbe | nindent 12 }}
          {{- end }}
          securityContext:
            runAsUser: 0
            {{- if $service.securityContext }}
              {{- toYaml $service.securityContext | nindent 12 }}
            {{- end }}
          {{- if $service.lifecycle }}
          lifecycle:
            {{- toYaml $service.lifecycle | nindent 12 }}
          {{- end }}
          {{- if $service.stdin }}
          stdin: {{ $service.stdin }}
          {{- end }}
          {{- if $service.tty }}
          tty: {{ $service.tty }}
          {{- end }}
      volumes:
        - name: update-conf
          configMap:
            name: {{ $serviceName }}
            defaultMode: 0744
      {{- if $service.nodeSelector }}
      nodeSelector:
        {{- toYaml $service.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if $service.tolerations }}
      tolerations:
        {{- toYaml $service.tolerations | nindent 8 }}
      {{- end }}
      {{- if $service.affinity }}
      affinity:
        {{- toYaml $service.affinity | nindent 8 }}
      {{- end }}
      {{- if $service.podSecurityContext }}
      securityContext:
        {{- toYaml $service.podSecurityContext | nindent 8 }}
      {{- end }}
      {{- if $service.hostname }}
      hostname: {{ $service.hostname }}
      {{- end }}
      {{- if $service.subdomain }}
      subdomain: {{ $service.subdomain }}
      {{- end }}
