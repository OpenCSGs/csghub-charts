{{- /*
Copyright OpenCSG, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.names.custom" (list . "gateway-rproxy-nginx") }}
  namespace: {{ .Release.Namespace }}
  labels: {{ include "common.labels" (dict "context" . "service" "gateway") | nindent 4 }}
data:
  {{- $spaceNamespace := .Values.global.deploy.namespace }}
  {{- if eq .Values.global.deploy.mergingNamespace "Single" }}
  {{- $spaceNamespace = .Release.Namespace }}
  {{- end }}
  {{- range .Values.global.deploy.knative.serving.services }}
  {{ .domain }}.conf: |
    server {
        listen 80;
        server_name {{ printf "*.%s.%s" $spaceNamespace .domain }};

        resolver kube-dns.kube-system.svc.{{ include "cluster.domain" . }} valid=5s;
        resolver_timeout 3s;

        location / {
            proxy_http_version 1.1;

            {{- if and .host .port }}
            proxy_pass http://{{ .host }}:{{ .port }};
            {{- else }}
              {{- $kourierNamespace := "kourier-system" }}
              {{- if eq $.Values.global.deploy.mergingNamespace "Multi" }}
                {{- $kourierNamespace = "knative-serving" }}
              {{- else if eq $.Values.global.deploy.mergingNamespace "Single" }}
                {{- $kourierNamespace = $.Release.Namespace }}
              {{- end }}
            set $knativeBackend {{ printf "kourier.%s.svc.%s" $kourierNamespace (include "cluster.domain" .) }};
            proxy_pass http://$knativeBackend;
            {{- end }}

            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';

            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
                add_header 'Content-Length' 0;
                return 204;
            }

            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection 'upgrade';
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root  /usr/share/nginx/html;
        }
    }
    {{- end }}
  default.conf: |
    server {
        listen       80;
        server_name  localhost;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }