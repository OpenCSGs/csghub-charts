## Global Configuration
global:
  ## Deployment edition: "ce" (Community) or "ee" (Enterprise)
  edition: "ee"

  ## Ingress Configuration
  ingress:
    ## Define other ingressClass types compatible with ingress-nginx
    # className: "nginx"
    ## Domain name for accessing csghub
    domain: msens.cn
    ## Whether to use the top-level domain directly for access
    ## If true, access via domain only (example.com)
    ## If false, access via subdomain+domain (csghub.example.com)
    useTop: false
    ## TLS Configuration
    tls: {}
      ## Enable or disable TLS.
      # enabled: false
      ## If tls enabled, a secret needs to be provided
      # secretName: ""
    service:
      ## Service type for ingress (LoadBalancer or NodePort)
      type: &type LoadBalancer

  ## Global image settings
  image:
    ## Image registry (without trailing slash)
    ## 【 CAUTION 】THIS WILL OVERWRITE LOCAL IMAGE REGISTRY
    # registry: "opencsg-registry.cn-beijing.cr.aliyuncs.com"
    ## Image tag format: {{version}}-{{edition}} (eg: v1.8.1-ee)
    tag: "v1.11.0"
    ## Image pull policy (Always, IfNotPresent, Never)
    pullPolicy: "IfNotPresent"
    ## Secrets for private registry authentication
    pullSecrets: []

  ## Persistent volume settings
  persistence:
    ## StorageClass name (empty for default)
    # storageClass: ""
    ## Volume access modes
    accessModes: ["ReadWriteOnce"]
    ## Default storage capacity
    size: 10Gi

  ## Database configuration
  postgresql:
    ## Use embedded PostgreSQL (true) or external (false)
    enabled: true
    ## External PostgreSQL connection settings
    external: {}
      # host: "<pg_host>"
      # port: 6432
      # user: "csghub"
      # password: ""
      # timezone: "Etc/UTC"
      # sslmode: "prefer"

  ## Redis configuration
  redis:
    ## Use built-in (true) or external (false) redis
    enabled: true
    ## External Redis configuration
    external: {}
      ## Hostname or IP address of the external Redis server
      # host: "<redis_host>"
      ## Port number for the Redis connection
      # port: 6379
      ## Password for Redis authentication
      # password: ""

  ## Object storage configuration
  objectStore:
    ## Use built-in (true) or external (false) object storage
    enabled: true
    ## External Object Storage configuration
    external: {}
      ## Endpoint URL for the object storage service
      # endpoint: "http://minio.<domain>"
      ## Access key for object storage authentication
      # accessKey: "minio"
      ## Secret key for object storage authentication
      # secretKey: ""
      ## Region where the bucket is located
      # region: "cn-north-1"
      ## Enable server-side encryption for objects
      # encrypt: false
      ## Use HTTPS for connections to the object storage
      # secure: false
      ## Use path-style addressing for the bucket (vs virtual-hosted style)
      # pathStyle: true

  ## Container Registry configuration
  registry:
    ## Use built-in (true) or external (false) container registry
    enabled: true
    ## External Container Registry configuration
    external: {}
      ## URL of the external container registry
      # registry: "registry-1.docker.io"
      ## Repository namespace in the external registry
      # repository: "csghub"
      ## Username for authenticating with the external registry
      # username: "registry"
      ## Password for authenticating with the external registry
      # password: ""
      ## Disable TLS/SSL encryption for the registry connection
      # insecure: false

  ## Gitaly configuration
  gitaly:
    ## Use built-in (true) or external (false) gitaly
    enabled: true
    ## External Gitaly configuration
    external: {}
      ## Connection scheme for Gitaly (tcp, tls, unix)
      # scheme: "tcp"
      ## Hostname or IP address of the external Gitaly server
      # host: "<gitaly_host>"
      ## Port number for the Gitaly connection
      # port: 8075
      ## Authentication token for Gitaly connection
      # token: ""
      ## Storage name for Gitaly repositories
      # storage: "default"

#################################################################
##  CSGHub Configuration                                       ##
#################################################################
## Core configuration
## All CSGHub services using this as default local image configuration
## except Portal
image:
  ## Docker registry secrets
  pullSecrets: []
  ## Image registry
  registry: "docker.io"
  ## Image repository
  repository: "opencsghq/csghub-server"
  ## Image version tag
  tag: "v1.11.0"
  ## Image pull behavior
  pullPolicy: "IfNotPresent"

## Log Level, eg: info, warning, debug, error
logging:
  ## Default info
  level: info

## Portal configuration
portal:
  ## Image settings (overrides global.image)
  image:
    ## Image repository
    repository: "opencsghq/csghub-portal"

  ## Configuration for ingress.
  ingress:
    ## Enable or disable ingress.
    enabled: true
    ## Ingress-nginx annotations
    annotations: {}
    ## TLS settings for ingress.
    tls: {}
      ## Enable or disable TLS.
      # enabled: false
      ## If tls enabled, a secret needs to be provided
      # secretName: ""

  ## Links to docs center (not for ce/ee)
  docs: {}
    ## If using domain, it'll create svc by ExternalName
    # domain: ""
    # host: "192.168.18.10"
    # port: "8003"

  ## Database configuration
  postgresql: {}
    ## PostgreSQL connection settings
    # host: "<pg_host>"
    # port: 5432
    # database: "csghub_portal"
    # user: "csghub"
    # password: ""
    # timezone: "Etc/UTC"
    # sslmode: "prefer"

  ## External Object Storage Service Configuration (OSS/S3 Compatible)
  objectStore: {}
    ## Endpoint URL for accessing the object storage service
    ## Example: "https://oss-cn-beijing.aliyuncs.com" or "http://minio.example.com:9000"
    # endpoint: ""
    ## Access Key ID for authentication
    # accessKey: ""
    ## Secret Access Key for authentication
    # accessSecret: ""
    ## Bucket name to be used in the object storage service
    # bucket: "csghub-portal-public"
    ## Region where the bucket is located
    ## Example: "us-east-1", "cn-beijing"
    # region: ""
    ## Use secure TLS certificates (skip certificate verification if false)
    # secure: false
    ## Enable TLS encryption for connections
    # encrypt: false
    ## When true, bucket name is included in URL path
    ## URL format: http://endpoint/bucket/object-key
    ## When false: http://bucket.endpoint/object-key
    # pathStyle: true

## Provides the main service logic and API interface,
##  and handles requests sent by the client.
server:
  ## Image settings (overrides global.image)
  image: {}

  ## Enable or disable the multi-sync service
  multiSync:
    enabled: true
    ## Set proxy to get model from CSGHub
    proxy: ""

  ## Enable Swagger API assistants
  swaggerAPI:
    enabled: false

  ## Database configuration
  postgresql: {}
    ## PostgreSQL connection settings
    # host: "<pg_host>"
    # port: 5432
    # database: "csghub_server"
    # user: "csghub"
    # password: ""
    # timezone: "Etc/UTC"
    # sslmode: "prefer"

  ## Redis configuration
  redis: {}
    ## Hostname or IP address of the external Redis server
    # host: "<redis_host>"
    ## Port number for the Redis connection
    # port: 6379
    ## Password for Redis authentication
    # password: ""

  ## External Object Storage Service Configuration (OSS/S3 Compatible)
  objectStore: {}
    ## Endpoint URL for accessing the object storage service
    ## Example: "https://oss-cn-beijing.aliyuncs.com" or "http://minio.example.com:9000"
    # endpoint: ""
    ## Access Key ID for authentication
    # accessKey: ""
    ## Secret Access Key for authentication
    # accessSecret: ""
    ## Bucket name to be used in the object storage service
    # bucket: "csghub-server"
    ## Region where the bucket is located
    ## Example: "us-east-1", "cn-beijing"
    # region: ""
    ## Use secure TLS certificates (skip certificate verification if false)
    # secure: false
    ## Enable TLS encryption for connections
    # encrypt: false
    ## When true, bucket name is included in URL path
    ## URL format: http://endpoint/bucket/object-key
    ## When false: http://bucket.endpoint/object-key
    # pathStyle: true

  ## Model images configuration
  model: {}
    ## Pull inference images from registry
    # registry: "docker.io"

## RProxy configuration
## Responsible for forwarding requests related to deployment instances,
##  such as forwarding space application operation requests to Knative Serving services.
rproxy:
  ## Using public domain for application accessing
  usePublicDomain: true

  ## Built-in CoreDNS Configuration
  ## Starting from v1.12.0, in the new operating mode, coredns has been deprecated.,
  ## but the service will be retained for forward compatibility
  coredns:
    ## Enable or Disable coredns
    enabled: true
    ## Image settings (overrides global.image)
    image:
      ## Image repository
      repository: "coredns/coredns"
      ## Image version tag
      tag: "1.11.1"

  ## Built-in Nginx Configuration
  ## Starting from v1.12.0, in the new operating mode, nginx has been deprecated.,
  ## but the service will be retained for forward compatibility
  nginx:
    ## Enable or Disable coredns
    enabled: true
    ## Image settings (overrides global.image)
    image:
      ## Image repository
      repository: "nginx"
      ## Image version tag
      tag: "latest"

## Accounting configuration
accounting: {}

## User configuration
user: {}

## Dataviewer configuration
dataviewer: {}

## Mirror configuration
mirror: {}

## Aigateway configuration
aigateway: {}

## Notifier configuration
notifier:
  ## Set timezone
  repoSyncTime: "Asia/Shanghai"

  ## SMTP notify settings
  smtp: {}
    # host: ""
    # port: 465
    # username: ""
    # password: ""

  feiShu: {}
    ## FeiShu bot Application Id
    # appId: ""
    ## FeiShu bot Application Secret
    # appSecret: ""

## Payment configuration
payment:
  ## Bucket to store billing
  billingBucket: "csghub-billing"

## Moderation configuration
## This service relies on external content review services,
##  such as cloud service providers' content review services.
moderation:
  ## Enable or disable the content moderation service
  enabled: false

  ## The API endpoint URL for the moderation service (Leave empty to disable)
  # endpoint: ""
  ## Access Key ID for authenticating with the moderation service
  # accessKeyId: ""
  ## Secret Access Key for authenticating with the moderation service
  # accessKeySecret: ""
  ## The service region (e.g., "us-west-1")
  # region: ""
  ## Enable SSL/TLS for secure communication with the service
  # enableSSL: true

## Runner configuration
runner:
  ## Namespace for user-deployed inference, fine-tuning, model evaluation, and other instances
  namespace: "spaces"

  ## Automatic install and configure knative, argo, lws, included namespace declared before
  ## Automatic configuration will use standardized installation to create their own namespaces,
  ##   and control the use of namespaces through mergingNamespace
  autoConfigure: true

  ## Merging mode: "multi" (reduce namespaces) or "single" (merge to one namespace) or "disable" (Disable merging)
  mergingNamespace: "disable"

  ## Custom pip repository URL
  pipIndexUrl: "https://pypi.tuna.tsinghua.edu.cn/simple/"

  ## Knative serving configuration
  knative:
    serving:
      ## It will generate ksvc with domain suffix http://<uuid>.<namespace>.<knative.serving.domain>
      ## Default global.ingress.domain
      domain: example.com
      ## Starting from v1.12.0, in the new operating mode, `services` has been deprecated.,
      ## but the service will be retained for forward compatibility
      services:
        ## Knative service type (LoadBalancer or NodePort)
        - type: LoadBalancer
          ## Internal domain for service access
          domain: "example.com"
          ## API server host address
          # host: "192.168.18.10"
          ## Service port (NodePort value when type is NodePort)
          # port: "30213"

## Dataflow configuration
dataflow:
  ## Enable or disable the dataflow service
  enabled: true

#################################################################
##  Other built-in third-party services                        ##
#################################################################
## Embedded PostgreSQL configuration
postgresql:
  ## Image settings (overrides global.image)
  image:
    ## Docker registry secrets
    pullSecrets: []
    ## Image registry
    registry: "docker.io"
    ## Image repository
    repository: "opencsghq/postgres"
    ## Image version tag
    tag: "15.10"
    ## Image pull behavior
    pullPolicy: "IfNotPresent"

  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Service port
    port: 5432
    ## Network protocol
    protocol: TCP

  ## Databases to create on startup
  ## Format:
  ## - databaseName
  databases:
    - "csghub_casdoor"
    - "csghub_temporal"

  ## PostgreSQL runtime parameters
  parameters: {}
    ## Dynamic parameters (it will trigger recreate)
    # max_connections: 400
    # shared_buffers: "128MB"

  ## Data persistence settings
  persistence:
    ## StorageClass for dynamic provisioning
    # storageClass: ""
    ## Volume access permissions
    # accessMode: ["ReadWriteOnce"]
    ## Disk space allocation
    size: 50Gi

## Built-in Redis Configuration
redis:
  ## Image settings (overrides global.image)
  image:
    ## Docker registry secrets
    pullSecrets: []
    ## Image registry
    registry: "docker.io"
    ## Image repository
    repository: "redis"
    ## Image version tag
    tag: "7.2.5"
    ## Image pull behavior
    pullPolicy: "IfNotPresent"

  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Service port
    port: 6379
    ## Network protocol
    protocol: TCP

  ## Password required
  requirePass: false

  ## Data persistence settings
  persistence:
    ## StorageClass for dynamic provisioning
    # storageClass: ""
    ## Volume access permissions
    # accessMode: ["ReadWriteOnce"]
    ## Disk space allocation
    size: 10Gi

## Built-in Redis Configuration
minio:
  ## Image settings (overrides global.image)
  image:
    ## Docker registry secrets
    pullSecrets: []
    ## Image registry
    registry: "docker.io"
    ## Image repository
    repository: "minio/minio"
    ## Image version tag
    tag: "RELEASE.2024-12-18T13-15-44Z"
    ## Image pull behavior
    pullPolicy: "IfNotPresent"

  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Service port
    port: 9000
    ## Network protocol
    protocol: TCP

  ## Console configuration
  console:
    ## If enabled console UI
    enabled: true
    ## Console Service configuration
    service:
      ## Service port
      port: 9001
      ## Network protocol
      protocol: TCP

  ## Configuration for ingress.
  ingress:
    ## Enable or disable ingress.
    enabled: true
    ## Ingress-nginx annotations
    annotations: {}
    ## TLS settings for ingress.
    tls: {}
      ## Enable or disable TLS.
      # enabled: false
      ## If tls enabled, a secret needs to be provided
      # secretName: ""

  ## Region
  region: "cn-north-1"

  ## Buckets to be created
  ## Add new bucket eg: <bucket_name>: <policy>
  ## Policy: https://docs.min.io/community/minio-object-store/reference/minio-mc/mc-anonymous-set.html#mc.anonymous.set
  buckets:
    csghub-registry: "none"
    csghub-billing: "none"
    csghub-server: "none"
    csghub-portal: "none"
    csghub-portal-public: "download"


  ## Data persistence settings
  persistence:
    ## StorageClass for dynamic provisioning
    # storageClass: ""
    ## Volume access permissions
    # accessMode: ["ReadWriteOnce"]
    ## Disk space allocation
    size: 500Gi

## Built-in Registry Configuration
registry:
  ## Image settings (overrides global.image)
  image:
    ## Docker registry secrets
    pullSecrets: []
    ## Image registry
    registry: "docker.io"
    ## Image repository
    repository: "registry"
    ## Image version tag
    tag: "2.8.3"
    ## Image pull behavior
    pullPolicy: "IfNotPresent"

  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Service port
    port: 5000
    ## Network protocol
    protocol: TCP

  ## Configuration for ingress.
  ingress:
    ## Enable or disable ingress.
    enabled: true
    ## Ingress-nginx annotations
    annotations: {}
    ## TLS settings for ingress.
    tls: {}
      ## Enable or disable TLS.
      # enabled: false
      ## If tls enabled, a secret needs to be provided
      # secretName: ""

  ## Configuration for logging
  logging:
    ## log level, enums error, warn, info, and debug
    level: "info"
    ## Formatter log, enums json, text, logstash
    formatter: "json"
    ## Enable access log
    accesslog: true

  ## External Object Storage Service Configuration (OSS/S3 Compatible)
  objectStore: {}
    ## Endpoint URL for accessing the object storage service
    ## Example: "https://oss-cn-beijing.aliyuncs.com" or "http://minio.example.com:9000"
    # endpoint: ""
    ## Access Key ID for authentication
    # accessKey: ""
    ## Secret Access Key for authentication
    # accessSecret: ""
    ## Bucket name to be used in the object storage service
    # bucket: "csghub-registry"
    ## Region where the bucket is located
    ## Example: "us-east-1", "cn-beijing"
    # region: ""
    ## Use secure TLS certificates (skip certificate verification if false)
    # secure: false
    ## Enable TLS encryption for connections
    # encrypt: false
    ## When true, bucket name is included in URL path
    ## URL format: http://endpoint/bucket/object-key
    ## When false: http://bucket.endpoint/object-key
    # pathStyle: true

## Built-in Gitaly Configuration
gitaly:
  ## Image settings (overrides global.image)
  image:
    ## Docker registry secrets
    pullSecrets: []
    ## Image registry
    registry: "registry.gitlab.com"
    ## Image repository
    repository: "gitlab-org/build/cng/gitaly"
    ## Image version tag
    tag: "v17.5.0"
    ## Image pull behavior
    pullPolicy: "IfNotPresent"

  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Service port
    port: 8075
    ## Network protocol
    protocol: TCP

  ## Define gitaly storage
  storage: "default"

  ## Log output level
  logging:
    level: "info"

  ## Data persistence settings
  persistence:
    ## StorageClass for dynamic provisioning
    # storageClass: ""
    ## Volume access permissions
    # accessMode: ["ReadWriteOnce"]
    ## Disk space allocation
    size: 200Gi

## Built-in Gitaly Configuration
gitlabShell:
  ## Image settings (overrides global.image)
  image:
    ## Docker registry secrets
    pullSecrets: []
    ## Image registry
    registry: "registry.gitlab.com"
    ## Image repository
    repository: "gitlab-org/build/cng/gitlab-shell"
    ## Image version tag
    tag: "v17.5.0"
    ## Image pull behavior
    pullPolicy: "IfNotPresent"

  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Service port
    port: 22
    ## Network protocol
    protocol: TCP

  ## RBAC configuration
  ## Enable to patch ingress tcp configuration
  rbac:
    create: true

  ## securityContext configuration
  securityContext:
    runAsUser: 0

## Built-in NATS Configuration
nats:
  ## Image settings (overrides global.image)
  image:
    ## Docker registry secrets
    pullSecrets: []
    ## Image registry
    registry: "docker.io"
    ## Image repository
    repository: "nats"
    ## Image version tag
    tag: "2.10.16"
    ## Image pull behavior
    pullPolicy: "IfNotPresent"

  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Service port
    port: 4222
    ## Network protocol
    protocol: TCP

  ## Data persistence settings
  persistence:
    ## StorageClass for dynamic provisioning
    # storageClass: ""
    ## Volume access permissions
    # accessMode: ["ReadWriteOnce"]
    ## Disk space allocation
    size: 10Gi

## Built-in Casdoor Configuration
casdoor:
  ## Init Admin user, default "root"
  admin: {}
    # name: root
    # password: ""

  ## Image settings (overrides global.image)
  image:
    ## Docker registry secrets
    pullSecrets: []
    ## Image registry
    registry: "docker.io"
    ## Image repository
    repository: "casbin/casdoor"
    ## Image version tag
    tag: "v1.799.0"
    ## Image pull behavior
    pullPolicy: "IfNotPresent"

  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Service port
    port: 8000
    ## Network protocol
    protocol: TCP

  ## Configuration for ingress.
  ingress:
    ## Enable or disable ingress.
    enabled: true
    ## Ingress-nginx annotations
    annotations: {}
    ## TLS settings for ingress.
    tls: {}
      ## Enable or disable TLS.
      # enabled: false
      ## If tls enabled, a secret needs to be provided
      # secretName: ""

  ## Database configuration
  postgresql: {}
    ## PostgreSQL connection settings
    # host: "<pg_host>"
    # port: 5432
    # database: "csghub_casdoor"
    # user: "csghub"
    # password: ""
    # timezone: "Etc/UTC"
    # sslmode: "prefer"

## Built-in Temporal Configuration
temporal:
  ## Image settings (overrides global.image)
  image:
    ## Container registry secrets
    pullSecrets: []
    ## Image registry
    registry: "docker.io"
    ## Image repository
    repository: "temporalio/auto-setup"
    ## Image version tag
    tag: "1.25.1"
    ## Image pull behavior
    pullPolicy: "IfNotPresent"

  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Service port
    port: 7233
    ## Network protocol
    protocol: TCP

  ## Console UI configuration
  console:
    ## If enabled console UI
    enabled: true
    ## Console image configuration
    image:
      ## Image repository for console ui
      repository: "temporalio/ui"
      ## Image version tag for console ui
      tag: "2.30.3"
    ## Console authentication configuration
    auth:
      user: "temporal"
      password: ""
    ## Service configuration
    service:
      ## Service port
      port: 8080
      ## Network protocol
      protocol: TCP

  ## Configuration for ingress.
  ingress:
    ## Enable or disable ingress.
    enabled: true
    ## Ingress-nginx annotations
    annotations: {}
    ## TLS settings for ingress.
    tls: {}
      ## Enable or disable TLS.
      # enabled: false
      ## If tls enabled, a secret needs to be provided
      # secretName: ""

  ## Database configuration
  postgresql: {}
    ## PostgreSQL connection settings
    # host: "<pg_host>"
    # port: 5432
    # database: "csghub_temporal"
    # user: "csghub"
    # password: ""
    # timezone: "Etc/UTC"
    # sslmode: "prefer"

#################################################################
##  Dependent subchart configuration                           ##
#################################################################
## Reloader Configuration
reloader:
  image:
    name: "opencsghq/stakater-reloader"

## Tempo Configuration
tempo:
  enabled: false

## Prometheus Configuration
prometheus:
  enabled: true
  ingress: {}
