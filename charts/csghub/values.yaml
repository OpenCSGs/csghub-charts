#################################################################
##  Global Configuration                                       ##
#################################################################
global:
  ## Deployment edition: "ce" (Community) or "ee" (Enterprise)
  edition: "ee"

  ## Ingress configuration
  ingress:
    # className: "nginx"            # Ingress controller class name
    domain: "example.com"           # Base domain for accessing csghub
    useTop: false                   # Use top-level domain directly (true) or subdomain (false)
    ## TLS/SSL configuration
    tls:
      enabled: false                # Enable or disable TLS
      # secretName: ""                # TLS secret name (if enabled)
    ## Service configuration
    service:
      type: &type "LoadBalancer"          # Service type: LoadBalancer or NodePort

  ## Image management
  image:
    # registry: ""                  # Custom image registry (overrides local registry)
    tag: "v1.11.0"                  # Image tag format: {{version}}-{{edition}}
    pullPolicy: "IfNotPresent"      # Image pull policy: Always, IfNotPresent, Never
    pullSecrets: []                 # Private registry authentication secrets

  ## Persistent volume configuration
  persistence:
    # storageClass: ""              # StorageClass name (empty for default)
    accessModes: ["ReadWriteOnce"]  # Volume access modes
    size: "10Gi"                    # Default storage capacity

  ## Database configuration
  postgresql:
    ## Use built-in (true) or external (false)
    enabled: true
    ## External PostgreSQL connection
    external: {}
      # host: "<pg_host>"           # PostgreSQL host address
      # port: 6432                  # PostgreSQL port
      # user: "csghub"              # Database username
      # password: ""                # Database password
      # timezone: "Etc/UTC"         # Database timezone
      # sslmode: "prefer"           # SSL mode

  ## Redis configuration
  redis:
    ## Use built-in (true) or external (false)
    enabled: true
    ## External Redis configuration
    external: {}
      # host: "<redis_host>"        # Redis server hostname or IP
      # port: 6379                  # Redis port number
      # password: ""                # Redis authentication password

  ## Object storage configuration
  objectStore:
    ## Use built-in (true) or external (false)
    enabled: true
    ## External Object Storage
    external: {}
      # endpoint: ""                # Object storage endpoint URL
      # accessKey: ""               # Access key for authentication
      # secretKey: ""               # Secret key for authentication
      # region: "cn-north-1"        # Storage region
      # encrypt: "false"            # Enable server-side encryption
      # secure: "false"             # Use HTTPS for connections
      # pathStyle: "true"           # Use path-style addressing

  ## Container Registry configuration
  registry:
    ## Use built-in (true) or external (false)
    enabled: true
    ## External Container Registry
    external: {}
      # registry: ""                # External registry URL
      # repository: "csghub"        # Repository namespace
      # username: ""                # Registry username
      # password: ""                # Registry password
      # insecure: "false"           # Disable TLS/SSL encryption

  ## Gitaly configuration
  gitaly:
    ## Use built-in (true) or external (false)
    enabled: true
    ## External Gitaly configuration
    external: {}
      # scheme: "tcp"               # Connection scheme: tcp, tls, unix
      # host: "<gitaly_host>"       # Gitaly server hostname or IP
      # port: 8075                  # Gitaly port number
      # token: ""                   # Authentication token
      # storage: "default"          # Storage name for repositories

#################################################################
##  CSGHub Core Configuration                                  ##
#################################################################
## All CSGHub services using this as default local image configuration (except Portal)
## Global image configuration
image:
  registry: "docker.io"                    # Docker registry
  repository: "opencsghq/csghub-server"
  tag: "v1.11.0"                           # Image version tag
  pullPolicy: "IfNotPresent"               # Image pull policy: Always, IfNotPresent, Never
  pullSecrets: []                          # Docker registry secrets

## Logging configuration
logging:
  level: "info"                            # Log level: info, warning, debug, error

## Portal service configuration
portal:
  ## Image settings (overrides global.image)
  image:
    repository: "opencsghq/csghub-portal"  # Portal image repository

  ## Ingress configuration
  ingress:
    enabled: true                          # Enable or disable ingress
    annotations: {}                        # Ingress-nginx annotations
    tls: {}                                # TLS settings for ingress
      # enabled: false                     # Enable or disable TLS
      # secretName: ""                     # TLS secret name (if enabled)

  ## Documentation center links
  docs: {}
    # domain: ""                           # External docs domain (creates ExternalName service)
    # host: "192.168.18.10"                # Docs service host
    # port: "8003"                         # Docs service port

  ## Database configuration
  postgresql: {}
    # host: "<pg_host>"                    # PostgreSQL host address
    # port: 5432                           # PostgreSQL port
    # database: "csghub_portal"            # Database name
    # user: "csghub"                       # Database username
    # password: ""                         # Database password
    # timezone: "Etc/UTC"                  # Database timezone
    # sslmode: "prefer"                    # SSL mode

  ## Object storage configuration
  objectStore: {}
    # endpoint: ""                         # Object storage endpoint URL
    # accessKey: ""                        # Access key for authentication
    # secretKey: ""                        # Secret key for authentication
    # bucket: "csghub-portal-public"       # Bucket name
    # region: ""                           # Storage region
    # secure: false                        # Use secure TLS certificates
    # encrypt: false                       # Enable TLS encryption
    # pathStyle: true                      # Use path-style addressing

## Main service logic and API interface
server:
  ## Image settings (overrides global.image)
  image: {}

  ## GitLab SSH configuration
  gitlabShell: {}
    # sshPort: "22"                        # GitLab SSH port

  ## Multi-sync service configuration
  multiSync:
    enabled: true                          # Enable or disable multi-sync service
    proxy: ""                              # Proxy for model synchronization

  ## API documentation
  swaggerAPI:
    enabled: false                         # Enable Swagger API assistants

  ## Database configuration
  postgresql: {}
    # host: "<pg_host>"                    # PostgreSQL host address
    # port: 5432                           # PostgreSQL port
    # database: "csghub_server"            # Database name
    # user: "csghub"                       # Database username
    # password: ""                         # Database password
    # timezone: "Etc/UTC"                  # Database timezone
    # sslmode: "prefer"                    # SSL mode

  ## Redis configuration
  redis: {}
    # host: "<redis_host>"                 # Redis server hostname or IP
    # port: 6379                           # Redis port number
    # password: ""                         # Redis authentication password

  ## Object storage configuration
  objectStore: {}
    # endpoint: ""                         # Object storage endpoint URL
    # accessKey: ""                        # Access key for authentication
    # secretKey: ""                        # Secret key for authentication
    # bucket: "csghub-server"              # Bucket name
    # region: ""                           # Storage region
    # secure: false                        # Use secure TLS certificates
    # encrypt: false                       # Enable TLS encryption
    # pathStyle: true                      # Use path-style addressing

## Reverse proxy configuration
rproxy:
  ## CoreDNS configuration (deprecated from v1.12.0, retained for compatibility)
  coredns:
    enabled: true                          # Enable or disable CoreDNS
    image:
      repository: "coredns/coredns"        # CoreDNS image repository
      tag: "1.11.1"                        # CoreDNS image tag

  ## Nginx configuration (deprecated from v1.12.0, retained for compatibility)
  nginx:
    enabled: true                          # Enable or disable Nginx
    image:
      repository: "nginx"                  # Nginx image repository
      tag: "latest"                        # Nginx image tag

## Notification service configuration
notifier:
  repoSyncTime: "Asia/Shanghai"            # Timezone for repository synchronization

  ## SMTP notification settings
  smtp: {}
    # host: ""                             # SMTP server host
    # port: 465                            # SMTP server port
    # username: ""                         # SMTP username
    # password: ""                         # SMTP password

  ## FeiShu notification settings
  feiShu: {}
    # appId: ""                            # FeiShu bot Application ID
    # appSecret: ""                        # FeiShu bot Application Secret

## Payment service configuration
payment:
  billingBucket: "csghub-billing"          # Bucket for storing billing data

## Gateway service configuration
gateway:
  ## AI Gateway configuration
  aigateway: {}

  ## Content moderation configuration
  moderation:
    enabled: false                         # Enable or disable content moderation
    ## External moderation service settings
    # endpoint: ""                         # Moderation API endpoint URL
    # accessKeyId: ""                      # Access key for authentication
    # accessKeySecret: ""                  # Secret key for authentication
    # region: ""                           # Service region
    # enableSSL: true                      # Enable SSL/TLS for secure communication

## Runner configuration
runner:
  enabled: true                          # Enable or disable internal runner

  ## Runner deployment context
  chartContext:
    isBuiltIn: true                      # Runner deployed bundled with csghub

  ## Runner operation and communication
  region: "region-0"                     # Region the runner belongs to
  interval: 60                           # Communication interval with server (seconds)

  ## Namespace management
  namespace: "spaces"                    # Namespace for user-deployed workloads
  autoConfigure: true                    # Automatically install knative/argo/lws
  mergingNamespace: "disable"            # Namespace merging: multi, single, disable

  ## Networking configuration
  usePublicDomain: true                  # Use public domain for application access

  ## Package and image management
  pipIndexUrl: "https://pypi.tuna.tsinghua.edu.cn/simple/"  # Custom pip repository
  extraBuildArgs: []                     # Extra Kaniko build arguments
  modelRegistry: ""                      # Model image configuration

  ## GPU resource configuration
  gpuModelLabel:
    typeLabel: "nvidia.com/gpu.product"  # GPU type label
    capacityLabel: "nvidia.com/gpu"      # GPU capacity label

  ## Knative Serving configuration
  knative:
    serving:
      domain: "example.com"              # Domain suffix for Knative services

      ## Deprecated configuration (for backward compatibility)
      services:
        - type: "LoadBalancer"           # Service type: LoadBalancer or NodePort
          domain: "example.com"          # Internal service domain
          # host: "192.168.18.10"        # API server host address
          # port: "30213"                # NodePort value when type=NodePort

## Dataflow service configuration
dataflow:
  enabled: true                          # Enable or disable dataflow service

## Accounting service configuration
accounting: {}

## User service configuration
user: {}

## Data viewer configuration
dataviewer: {}

## Mirror service configuration
mirror: {}

#################################################################
##  Built-in Third-party Components                            ##
#################################################################
## Embedded PostgreSQL configuration
postgresql:
  image:
    registry: "docker.io"
    repository: "opencsghq/postgres"
    tag: "15.10"                             # Image version tag
    pullPolicy: "IfNotPresent"               # Image pull policy
    pullSecrets: []                          # Docker registry secrets

  service:
    type: "ClusterIP"                        # Service type: ClusterIP, NodePort, LoadBalancer
    port: 5432                               # Service port
    protocol: "TCP"                          # Network protocol

  databases:                                 # Databases to create on startup
    - "csghub_casdoor"
    - "csghub_temporal"
    - "csghub_server"
    - "csghub_portal"

  parameters: {}                             # PostgreSQL runtime parameters
    # max_connections: 400                   # Dynamic parameters (triggers recreate)
    # shared_buffers: "128MB"                # Shared memory buffers

  persistence:
    # storageClass: ""                       # StorageClass for dynamic provisioning
    # accessMode: ["ReadWriteOnce"]          # Volume access permissions
    size: "50Gi"                             # Disk space allocation

## Built-in Redis configuration
redis:
  image:
    registry: "docker.io"
    repository: "redis"
    tag: "7.2.5"                             # Image version tag
    pullPolicy: "IfNotPresent"               # Image pull policy
    pullSecrets: []                          # Docker registry secrets

  service:
    type: "ClusterIP"                        # Service type: ClusterIP, NodePort, LoadBalancer
    port: 6379                               # Service port
    protocol: "TCP"                          # Network protocol

  requirePass: false                         # Password requirement

  persistence:
    # storageClass: ""                       # StorageClass for dynamic provisioning
    # accessMode: ["ReadWriteOnce"]          # Volume access permissions
    size: "10Gi"                             # Disk space allocation

## Embedded MinIO configuration
minio:
  image:
    registry: "docker.io"
    repository: "minio/minio"
    tag: "RELEASE.2024-12-18T13-15-44Z"      # Image version tag
    pullPolicy: "IfNotPresent"               # Image pull policy
    pullSecrets: []                          # Docker registry secrets

  service:
    type: "ClusterIP"                        # Service type: ClusterIP, NodePort, LoadBalancer
    port: 9000                               # Service port
    protocol: "TCP"                          # Network protocol

  console:
    enabled: true                            # Enable console UI
    service:
      port: 9001                             # Console service port
      protocol: "TCP"                        # Network protocol

  ingress:
    enabled: true                            # Enable or disable ingress
    annotations: {}                          # Ingress-nginx annotations
    tls: {}                                  # TLS settings
      # enabled: false                       # Enable or disable TLS
      # secretName: ""                       # TLS secret name

  region: "cn-north-1"                       # Storage region

  buckets:                                   # Buckets to be created
    - name: "csghub-registry"                # Bucket name
      policy: "none"                         # Access policy: none, download, public
    - name: "csghub-billing"
      policy: "none"
    - name: "csghub-server"
      policy: "none"
    - name: "csghub-portal"
      policy: "none"
    - name: "csghub-portal-public"
      policy: "download"
    - name: "csghub-runner"
      policy: "none"

  persistence:
    # storageClass: ""                       # StorageClass for dynamic provisioning
    # accessMode: ["ReadWriteOnce"]          # Volume access permissions
    size: "500Gi"                            # Disk space allocation

## Embedded Registry configuration
registry:
  image:
    registry: "docker.io"
    repository: "registry"
    tag: "2.8.3"                             # Image version tag
    pullPolicy: "IfNotPresent"               # Image pull policy
    pullSecrets: []                          # Docker registry secrets

  service:
    type: "ClusterIP"                        # Service type: ClusterIP, NodePort, LoadBalancer
    port: 5000                               # Service port
    protocol: "TCP"                          # Network protocol

  ingress:
    enabled: true                            # Enable or disable ingress
    annotations: {}                          # Ingress-nginx annotations
    tls: {}                                  # TLS settings
      # enabled: false                       # Enable or disable TLS
      # secretName: ""                       # TLS secret name

  logging:
    level: "info"                            # Log level: error, warn, info, debug
    formatter: "json"                        # Log format: json, text, logstash
    accesslog: true                          # Enable access log

  objectStore: {}                            # External object storage
    # endpoint: ""                           # Object storage endpoint URL
    # accessKey: ""                          # Access key for authentication
    # secretKey: ""                          # Secret key for authentication
    # bucket: "csghub-registry"              # Bucket name
    # region: ""                             # Storage region
    # secure: false                          # Use secure TLS certificates
    # encrypt: false                         # Enable TLS encryption
    # pathStyle: true                        # Use path-style addressing

## Embedded Gitaly configuration
gitaly:
  image:
    registry: "registry.gitlab.com"          # Image registry
    repository: "gitlab-org/build/cng/gitaly" # Image repository
    tag: "v17.5.0"                           # Image version tag
    pullPolicy: "IfNotPresent"               # Image pull policy
    pullSecrets: []                          # Docker registry secrets

  service:
    type: "ClusterIP"                        # Service type: ClusterIP, NodePort, LoadBalancer
    port: 8075                               # Service port
    protocol: "TCP"                          # Network protocol

  storage: "default"                         # Gitaly storage name

  logging:
    level: "info"                            # Log output level

  persistence:
    # storageClass: ""                       # StorageClass for dynamic provisioning
    # accessMode: ["ReadWriteOnce"]          # Volume access permissions
    size: "200Gi"                            # Disk space allocation

## Embedded GitLab Shell configuration
gitlabShell:
  image:
    registry: "registry.gitlab.com"          # Image registry
    repository: "gitlab-org/build/cng/gitlab-shell" # Image repository
    tag: "v17.5.0"                           # Image version tag
    pullPolicy: "IfNotPresent"               # Image pull policy
    pullSecrets: []                          # Docker registry secrets

  service:
    type: "ClusterIP"                        # Service type: ClusterIP, NodePort, LoadBalancer
    port: 22                                 # SSH service port
    protocol: "TCP"                          # Network protocol

  rbac:
    create: true                             # Enable RBAC for ingress TCP configuration

  securityContext:
    runAsUser: 0                             # Run as root user

## Embedded NATS configuration
nats:
  image:
    registry: "docker.io"
    repository: "nats"
    tag: "2.10.16"                           # Image version tag
    pullPolicy: "IfNotPresent"               # Image pull policy
    pullSecrets: []                          # Docker registry secrets

  service:
    type: "ClusterIP"                        # Service type: ClusterIP, NodePort, LoadBalancer
    port: 4222                               # Service port
    protocol: "TCP"                          # Network protocol

  persistence:
    # storageClass: ""                       # StorageClass for dynamic provisioning
    # accessMode: ["ReadWriteOnce"]          # Volume access permissions
    size: "10Gi"                             # Disk space allocation

## Embedded Casdoor configuration
casdoor:
  admin: {}                                  # Initial admin user
    # name: "root"                           # Admin username
    # password: ""                           # Admin password

  image:
    registry: "docker.io"
    repository: "casbin/casdoor"
    tag: "v1.799.0"                          # Image version tag
    pullPolicy: "IfNotPresent"               # Image pull policy
    pullSecrets: []                          # Docker registry secrets

  service:
    type: "ClusterIP"                        # Service type: ClusterIP, NodePort, LoadBalancer
    port: 8000                               # Service port
    protocol: "TCP"                          # Network protocol

  ingress:
    enabled: true                            # Enable or disable ingress
    annotations: {}                          # Ingress-nginx annotations
    tls: {}                                  # TLS settings
      # enabled: false                       # Enable or disable TLS
    # secretName: ""                       # TLS secret name

  postgresql: {}                             # Database configuration
    # host: "<pg_host>"                      # PostgreSQL host address
    # port: 5432                             # PostgreSQL port
    # database: "csghub_casdoor"             # Database name
    # user: "csghub"                         # Database username
    # password: ""                           # Database password
    # timezone: "Etc/UTC"                    # Database timezone
    # sslmode: "prefer"                      # SSL mode

## Embedded Temporal configuration
temporal:
  image:
    registry: "docker.io"
    repository: "temporalio/auto-setup"
    tag: "1.25.1"                            # Image version tag
    pullPolicy: "IfNotPresent"               # Image pull policy
    pullSecrets: []                          # Docker registry secrets

  service:
    type: "ClusterIP"                        # Service type: ClusterIP, NodePort, LoadBalancer
    port: 7233                               # Service port
    protocol: "TCP"                          # Network protocol

  console:
    enabled: false                           # Enable console UI
    image:
      repository: "temporalio/ui"            # Console UI image repository
      tag: "2.30.3"                          # Console UI image tag
    auth:
      user: "temporal"                       # Console authentication user
      password: ""                           # Console authentication password
    service:
      port: 8080                             # Console service port
      protocol: "TCP"                        # Network protocol

  ingress:
    enabled: true                            # Enable or disable ingress
    annotations: {}                          # Ingress-nginx annotations
    tls: {}                                  # TLS settings
      # enabled: false                       # Enable or disable TLS
      # secretName: ""                       # TLS secret name

  postgresql: {}                             # Database configuration
    # host: "<pg_host>"                      # PostgreSQL host address
    # port: 5432                             # PostgreSQL port
    # database: "csghub_temporal"            # Database name
    # user: "csghub"                         # Database username
    # password: ""                           # Database password
    # timezone: "Etc/UTC"                    # Database timezone
    # sslmode: "prefer"                      # SSL mode

#################################################################
##  Dependent SubCharts                                        ##
##  PLEASE DO NOT UPDATE!!!                                    ##
#################################################################
## Do not modify it unless you know the purpose of the modification.

## Ingress-nginx configuration
ingress-nginx:
  enabled: true                            # Enable NGINX Ingress Controller

  ## TCP services configuration
  tcp:
    22: "csghub/csghub-gitlab-shell:22"   # Forward TCP traffic on port 22

  controller:
    progressDeadlineSeconds: 600           # Deployment progress deadline

    ## Image configuration
    image:
      image: "opencsghq/ingress-nginx-controller"
      digest: ""                           # Image digest (do not update)

    ## Admission webhooks configuration
    admissionWebhooks:
      patch:
        image:
          image: "opencsghq/ingress-nginx-kube-webhook-certgen"
          digest: ""                       # Image digest (do not update)

    ## Controller configuration
    config:
      annotations-risk-level: "Critical"   # Risk level for annotations
      custom-http-errors: "404,500,502,503" # Custom HTTP error codes

    allowSnippetAnnotations: true          # Allow server snippets in annotations

    ## Service configuration
    service:
      type: *type                          # Service type
      nodePorts:
        http: 30080                        # HTTP node port
        https: 30443                       # HTTPS node port
        tcp:
          22: 30022                        # TCP node port for SSH

  ## Custom error pages configuration
  defaultBackend:
    enabled: true                          # Enable custom error pages
    image:
      image: "opencsghq/ingress-nginx-custom-error-pages"
      tag: "v1.2.0"
    extraVolumes:
      - name: "custom-error-pages"
        configMap:
          name: "ingress-nginx-custom-errors"
    extraVolumeMounts:
      - name: "custom-error-pages"
        mountPath: "/www"

## Fluentd log collection configuration
fluentd:
  enabled: false                           # Enable or disable Fluentd
  image:
    repository: "opencsghq/fluent-fluentd-kubernetes-daemonset" # Fluentd image
  fileConfigs: {}                          # Fluentd file sources configuration

## Reloader configuration
reloader:
  image:
    name: "opencsghq/stakater-reloader"    # Reloader image name

## Loki log aggregation configuration
loki:
  ingress:
    enabled: false                         # Enable Loki ingress
    basicAuth: {}                          # Basic authentication
      # username: "loki"
      # password: "loki"

  memcached:
    image:
      registry: "docker.io"                # Memcached image registry

  memcachedExporter:
    enabled: false                         # Disable memcached exporter

  sidecar:
    image:
      registry: "docker.io"                # Sidecar image registry

  deploymentMode: "SingleBinary"           # Deployment mode: SingleBinary or MicroServices

  singleBinary:
    replicas: 1                            # Single binary replicas
    extraVolumeMounts:
      - name: "storage"
        mountPath: "/loki"                 # Storage volume mount
    extraEnv:
      - name: "GOMEMLIMIT"
        value: "3750MiB"                   # Memory limit for Go runtime

  ## Component replication (disabled for distributed mode)
  write:
    replicas: 0                            # Write component replicas
  read:
    replicas: 0                            # Read component replicas
  backend:
    replicas: 0                            # Backend component replicas

  lokiCanary:
    enabled: false                         # Disable Loki canary monitoring

  gateway:
    enabled: false                         # Disable Loki gateway

  ## Core Loki configuration
  loki:
    auth_enabled: false                    # Disable authentication
    commonConfig:
      replication_factor: 1                # Data replication factor
      path_prefix: "/loki"                 # Storage path prefix
      ring:
        kvstore:
          store: "inmemory"                # In-memory key-value store
    storage:
      type: "filesystem"                   # Storage type: filesystem
    schemaConfig:
      configs:
        - from: "2024-04-01"
          store: "tsdb"                    # Time-series database store
          object_store: "filesystem"       # Object storage backend
          schema: "v13"                    # Schema version
          index:
            prefix: "loki_index_"          # Index prefix
            period: "24h"                  # Index period
    ingester:
      chunk_encoding: "snappy"             # Chunk encoding compression
    tracing:
      enabled: false                       # Disable tracing
    querier:
      max_concurrent: 2                    # Maximum concurrent queries

  test:
    enabled: false                         # Disable test configuration

  ## Cache configuration
  chunksCache:
    writebackSizeLimit: "10MB"             # Chunks cache writeback size limit
    resources:
      limits:
        memory: "4096Mi"                   # Memory limit
      requests:
        memory: "2048Mi"                   # Memory request

  resultsCache:
    resources:
      limits:
        memory: "1024Mi"                   # Memory limit
      requests:
        memory: "512Mi"                    # Memory request

## Tempo tracing configuration
tempo:
  enabled: false                           # Enable or disable Tempo

## Prometheus monitoring configuration
prometheus:
  enabled: false                           # Enable Prometheus

  ingress:
    enabled: false                         # Enable Prometheus ingress
    basicAuth: {}                          # Basic authentication
      # username: "prometheus"
      # password: ""

  ## Component configuration
  alertmanager:
    enabled: false                         # Disable Alertmanager
  prometheus-pushgateway:
    enabled: false                         # Disable pushgateway
  prometheus-node-exporter:
    enabled: false                         # Disable node exporter

  ## Server configuration
  server:
    image:
      registry: "quay.io"
      repository: "prometheus/prometheus"
      tag: "v3.5.0"

  ## ConfigMap reload configuration
  configmapReload:
    prometheus:
      image:
        registry: "quay.io"
        repository: "prometheus-operator/prometheus-config-reloader"
        tag: "v0.85.0"

  ## Kube-state-metrics configuration
  kube-state-metrics:
    image:
      tag: "v2.17.0"
