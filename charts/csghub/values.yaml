global:
  ## Ingress Configuration
  ingress:
    ## Define other ingressClass types compatible with ingress-nginx
    # className: "nginx"
    ## Domain name for accessing csghub
    domain: msens.cn
    ## Whether to use the top-level domain directly for access
    ## If true, access via domain only (example.com)
    ## If false, access via subdomain+domain (csghub.example.com)
    useTop: false
    ## TLS Configuration
    tls: {}
      ## Enable or disable TLS.
      # enabled: false
      ## If tls enabled, a secret needs to be provided
      # secretName: ""
    service:
      ## Service type for ingress (LoadBalancer or NodePort)
      type: &type LoadBalancer

  ## Global image settings
  image:
    ## Image registry URL (without trailing slash)
    ## 【 CAUTION 】THIS WILL OVERWRITE LOCAL IMAGE REGISTRY
    # registry: "opencsg-registry.cn-beijing.cr.aliyuncs.com"
    ## Image tag format: {{version}}-{{edition}} (eg: v1.8.1-ee)
    tag: "v1.11.0"
    ## Image pull policy (Always, IfNotPresent, Never)
    pullPolicy: "IfNotPresent"
    ## Secrets for private registry authentication
    pullSecrets: []

  ## Persistent volume settings
  persistence:
    ## StorageClass name (empty for default)
    # storageClass: ""
    ## Volume access modes
    accessModes: ["ReadWriteOnce"]
    ## Default storage capacity
    size: 10Gi

  ## Database configuration
  postgresql:
    ## Use embedded PostgreSQL (true) or external (false)
    enabled: true
    ## External PostgreSQL connection settings
    external: {}
      # host: "<pg_host>"
      # port: 6432
      # user: "csghub"
      # password: ""
      # timezone: "Etc/UTC"
      # sslmode: "prefer"

  ## Redis configuration
  redis:
    ## Use built-in (true) or external (false) redis
    enabled: true
    ## External Redis configuration
    external: {}
      ## Hostname or IP address of the external Redis server
      # host: "<redis_host>"
      ## Port number for the Redis connection
      # port: 6379
      ## Password for Redis authentication
      # password: ""

  ## Object storage configuration
  objectStore:
    ## Use built-in (true) or external (false) object storage
    enabled: true
    ## External Object Storage configuration
    external: {}
      ## Endpoint URL for the object storage service
      # endpoint: "http://minio.<domain>"
      ## Access key for object storage authentication
      # accessKey: "minio"
      ## Secret key for object storage authentication
      # secretKey: ""
      ## Region where the bucket is located
      # region: "cn-north-1"
      ## Enable server-side encryption for objects
      # encrypt: false
      ## Use HTTPS for connections to the object storage
      # secure: false
      ## Use path-style addressing for the bucket (vs virtual-hosted style)
      # pathStyle: true

  ## Container Registry configuration
  registry:
    ## Use built-in (true) or external (false) container registry
    enabled: true
    ## External Container Registry configuration
    external: {}
      ## URL of the external container registry
      # registry: "registry-1.docker.io"
      ## Repository namespace in the external registry
      # repository: "csghub"
      ## Username for authenticating with the external registry
      # username: "registry"
      ## Password for authenticating with the external registry
      # password: ""
      ## Disable TLS/SSL encryption for the registry connection
      # insecure: false

  ## Gitaly configuration
  gitaly:
    ## Use built-in (true) or external (false) gitaly
    enabled: true
    ## External Gitaly configuration
    external: {}
      ## Connection scheme for Gitaly (tcp, tls, unix)
      # scheme: "tcp"
      ## Hostname or IP address of the external Gitaly server
      # host: "<gitaly_host>"
      ## Port number for the Gitaly connection
      # port: 8075
      ## Authentication token for Gitaly connection
      # token: ""
      ## Storage name for Gitaly repositories
      # storage: "default"

## Embedded PostgreSQL configuration
postgresql:
  ## Resource name prefix
  name: "postgresql"

  ## Image settings (overrides global.image)
  image:
    ## Docker registry secrets
    pullSecrets: []
    ## Container registry URL
    registry: "docker.io"
    ## PostgreSQL image repository
    repository: "opencsghq/postgres"
    ## Image version tag
    tag: "15.10"
    ## Image pull behavior
    pullPolicy: "IfNotPresent"

  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Database service port
    port: 5432
    ## Network protocol
    protocol: TCP

  ## Databases to create on startup
  databases: ["csghub"]
  ## Format:
  ## - databaseName

  ## PostgreSQL runtime parameters
  parameters: {}
    ## Dynamic parameters (it will trigger recreate)
    # max_connections: 400
    # shared_buffers: "128MB"

  ## Data persistence settings
  persistence:
    ## StorageClass for dynamic provisioning
    # storageClass: ""
    ## Volume access permissions
    # accessMode: ["ReadWriteOnce"]
    ## Disk space allocation
    size: 50Gi

## Built-in Redis Configuration
redis:
  ## Resource name prefix
  name: "redis"

  ## Image settings (overrides global.image)
  image:
    ## Docker registry secrets
    pullSecrets: []
    ## Container registry URL
    registry: "docker.io"
    ## PostgreSQL image repository
    repository: "redis"
    ## Image version tag
    tag: "7.2.5"
    ## Image pull behavior
    pullPolicy: "IfNotPresent"

  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Database service port
    port: 6379
    ## Network protocol
    protocol: TCP

  ## Password required
  requirePass: false

  ## Data persistence settings
  persistence:
    ## StorageClass for dynamic provisioning
    # storageClass: ""
    ## Volume access permissions
    # accessMode: ["ReadWriteOnce"]
    ## Disk space allocation
    size: 10Gi

## Built-in Redis Configuration
minio:
  ## Resource name prefix
  name: "minio"

  ## Image settings (overrides global.image)
  image:
    ## Docker registry secrets
    pullSecrets: []
    ## Container registry URL
    registry: "docker.io"
    ## PostgreSQL image repository
    repository: "minio/minio"
    ## Image version tag
    tag: "RELEASE.2024-12-18T13-15-44Z"
    ## Image pull behavior
    pullPolicy: "IfNotPresent"

  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Database service port
    port: 9000
    ## Network protocol
    protocol: TCP

  ## Console configuration
  console:
    ## If enabled console UI
    enabled: true
    ## Console Service configuration
    service:
      ## Database service port
      port: 9001
      ## Network protocol
      protocol: TCP

  ## Configuration for ingress.
  ingress:
    ## Enable or disable ingress.
    enabled: true
    ## Ingress-nginx annotations
    annotations: {}
    ## TLS settings for ingress.
    tls: {}
      ## Enable or disable TLS.
      # enabled: false
      ## If tls enabled, a secret needs to be provided
      # secretName: ""

  ## Region
  region: "cn-north-1"

  ## Buckets to be created
  ## Add new bucket eg: <bucket_name>: <policy>
  ## Policy: https://docs.min.io/community/minio-object-store/reference/minio-mc/mc-anonymous-set.html#mc.anonymous.set
  buckets:
    csghub-registry: "none"

  ## Data persistence settings
  persistence:
    ## StorageClass for dynamic provisioning
    # storageClass: ""
    ## Volume access permissions
    # accessMode: ["ReadWriteOnce"]
    ## Disk space allocation
    size: 500Gi

## Built-in Registry Configuration
registry:
  ## Resource name prefix
  name: "registry"

  ## Image settings (overrides global.image)
  image:
    ## Docker registry secrets
    pullSecrets: []
    ## Container registry URL
    registry: "docker.io"
    ## PostgreSQL image repository
    repository: "registry"
    ## Image version tag
    tag: "2.8.3"
    ## Image pull behavior
    pullPolicy: "IfNotPresent"

  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Database service port
    port: 5000
    ## Network protocol
    protocol: TCP

  ## Configuration for ingress.
  ingress:
    ## Enable or disable ingress.
    enabled: true
    ## Ingress-nginx annotations
    annotations: {}
    ## TLS settings for ingress.
    tls: {}
      ## Enable or disable TLS.
      # enabled: false
      ## If tls enabled, a secret needs to be provided
      # secretName: ""

  ## Configuration for logging
  logging:
    ## log level, enums error, warn, info, and debug
    level: "info"
    ## Formatter log, enums json, text, logstash
    formatter: "json"
    ## Enable access log
    accesslog: true

  ## External Object Storage Service Configuration (OSS/S3 Compatible)
  objectStore: {}
    ## Endpoint URL for accessing the object storage service
    ## Example: "https://oss-cn-beijing.aliyuncs.com" or "http://minio.example.com:9000"
    # endpoint: ""
    ## Access Key ID for authentication
    # accessKey: ""
    ## Secret Access Key for authentication
    # accessSecret: ""
    ## Bucket name to be used in the object storage service
    # bucket: "csghub-registry"
    ## Region where the bucket is located
    ## Example: "us-east-1", "cn-beijing"
    # region: ""
    ## Use secure TLS certificates (skip certificate verification if false)
    # secure: false
    ## Enable TLS encryption for connections
    # encrypt: false
    ## When true, bucket name is included in URL path
    ## URL format: http://endpoint/bucket/object-key
    ## When false: http://bucket.endpoint/object-key
    # pathStyle: true

## Built-in Gitaly Configuration
gitaly:
  ## Resource name prefix
  name: "gitaly"

  ## Image settings (overrides global.image)
  image:
    ## Docker registry secrets
    pullSecrets: []
    ## Container registry URL
    registry: "registry.gitlab.com"
    ## PostgreSQL image repository
    repository: "gitlab-org/build/cng/gitaly"
    ## Image version tag
    tag: "v17.5.0"
    ## Image pull behavior
    pullPolicy: "IfNotPresent"

  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Database service port
    port: 8075
    ## Network protocol
    protocol: TCP

  ## Log output level
  logging:
    level: "info"

  ## Data persistence settings
  persistence:
    ## StorageClass for dynamic provisioning
    # storageClass: ""
    ## Volume access permissions
    # accessMode: ["ReadWriteOnce"]
    ## Disk space allocation
    size: 200Gi

## Built-in CSGHub Server Configuration
server:
  ## Service configuration
  service:
    ## Service type (ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    ## Database service port
    port: 8080
    ## Network protocol
    protocol: TCP

## Reloader Configuration
reloader:
  image:
    name: "opencsghq/stakater-reloader"
