## Global configuration will override subChart's configuration
global:
  ## Deployment edition: "ce" (Community) or "ee" (Enterprise)
  edition: "ee"

  ## Image configuration
  image:
    ## Image registry path (without trailing slash)
    ## It's cannot be set to nil, comment out using original image default.
    # registry: "opencsg-registry.cn-beijing.cr.aliyuncs.com"
    ## Image tag format: {{ tag }}-{{ edition }} (e.g., v1.8.1-ee)
    tag: "v1.11.0"
    ## Image pull policy
    pullPolicy: "IfNotPresent"
    ## Kubernetes secrets for pulling images from private registry
    pullSecrets: []

  ## Pod Disruption Budget configuration
  pdb:
    create: false
    minAvailable: 1
    # maxUnavailable: 1

  ## Ingress configuration
  ingress:
    # className: "nginx"
    ## Domain name for accessing csghub
    domain: example.com
    ## Subdomain prefix that combines with domain to form the full access URL
    customDomainPrefixes: {}
      ## Others such as registry, minio, temporal, public, csgship, csgshipAPI can be customized in the same way
      # portal: "csghub"
      # casdoor: "iam"
    ## Whether to use the top-level domain directly for access
    ## If true, access via domain only (example.com)
    ## If false, access via subdomain+domain (csghub.example.com)
    useTop: false
    ## TLS configuration
    tls: {}
      # enabled: false
      # secretName: ""
    service:
      ## Service type for ingress (LoadBalancer or NodePort)
      type: &type LoadBalancer

  ## Container Registry configuration
  registry:
    ## Use built-in (true) or external (false) container registry
    enabled: true
    ## External Container Registry configuration
    external: {}
      ## URL of the external container registry
      # registry: "registry-1.docker.io"
      ## Repository namespace in the external registry
      # repository: "csghub"
      ## Username for authenticating with the external registry
      # username: "registry"
      ## Password for authenticating with the external registry
      # password: ""
      ## Disable TLS/SSL encryption for the registry connection
      # insecure: false

  ## PostgreSQL database configuration
  postgresql:
    ## Use built-in (true) or external (false) postgresql
    enabled: true
    ## External PostgreSQL configuration
    external: {}
      ## Hostname or IP address of the external PostgreSQL server
      # host: "<pg_host>"
      ## Port number for the PostgreSQL connection
      # port: 6432
      ## Username for PostgreSQL authentication
      # user: "csghub"
      ## Password for PostgreSQL authentication
      # password: ""
      ## Timezone setting for the database connection
      # timezone: "Etc/UTC"
      ## SSL mode for the database connection (prefer, require, verify-full, etc.)
      # sslmode: "prefer"

  ## Redis configuration
  redis:
    ## Use built-in (true) or external (false) redis
    enabled: true
    ## External Redis configuration
    external: {}
      ## Hostname or IP address of the external Redis server
      # host: "<redis_host>"
      ## Port number for the Redis connection
      # port: 6379
      ## Password for Redis authentication
      # password: ""

  ## Object storage configuration
  objectStore:
    ## Use built-in (true) or external (false) object storage
    enabled: true
    ## External Object Storage configuration
    external: {}
      ## Endpoint URL for the object storage service
      # endpoint: "http://minio.<domain>"
      ## Access key for object storage authentication
      # accessKey: "minio"
      ## Secret key for object storage authentication
      # secretKey: ""
      ## Region where the bucket is located
      # region: "cn-north-1"
      ## Enable server-side encryption for objects
      # encrypt: false
      ## Use HTTPS for connections to the object storage
      # secure: false
      ## Use path-style addressing for the bucket (vs virtual-hosted style)
      # pathStyle: true

  ## Gitaly configuration
  gitaly:
    ## Use built-in (true) or external (false) gitaly
    enabled: true
    ## External Gitaly configuration
    external: {}
      ## Connection scheme for Gitaly (tcp, tls, unix)
      # scheme: "tcp"
      ## Hostname or IP address of the external Gitaly server
      # host: "<gitaly_host>"
      ## Port number for the Gitaly connection
      # port: 8075
      ## Storage name for Gitaly repositories
      # storage: "default"
      ## Authentication token for Gitaly connection
      # token: ""
      ## Enable Gitaly cluster (EE only)
      # isCluster: false

  ## Content moderation configuration
  moderation:
    ## Flag to enable or disable the moderation service
    enabled: false
    ## The endpoint URL of the moderation service (leave empty if not applicable)
    # endpoint: ""
    ## The access key ID for authentication with the moderation service
    # accessKeyId: ""
    ## The access key secret for authentication with the moderation service
    # accessKeySecret: ""
    ## The region identifier where the moderation service is hosted (e.g., "us-west-1")
    # region: ""
    ## Enable or disable SSL/TLS for secure communication with the moderation service
    # enableSSL: true

  ## Namespace for deployment
  namespace: "spaces"

  ## Auto-install knative and argo
  autoConfigure: true

  ## Namespace merging configuration
  ## Merging mode: "Multi" (reduce namespaces) or "Single" (merge to one namespace) or "Disable" (Disable merging)
  mergingNamespace: "Disable"

  ## Knative serving configuration
  knative:
    serving:
      services:
        ## Knative service type (LoadBalancer or NodePort)
        - type: NodePort
          ## Internal domain for service access
          domain: "example.com"
          ## API server host address
          # host: "192.168.18.10"
          ## Service port (NodePort value when type is NodePort)
          # port: "30213"

  ## Custom pip repository URL
  pipIndexUrl: "https://pypi.tuna.tsinghua.edu.cn/simple/"

  ## Use public domain for deployments
  usePublicDomain: true

  ## Clearly identify the running mode, root means running as a subchart
  chartContext:
    isRoot: true

  ## Persistent storage configuration
  persistence: {}
    # storageClass: ""
    # accessMode: ["ReadWriteOnce"]

  ## Csgship OAuth configuration
  csgship:
    oauth: {}
      # issuer: "https://gitlab.example.com"
      # clientId: "73f1c2922f51d68fa87de8c1ef0e23e8940f3aa42f5ac7a55a1f586c597d7e9c"
      # clientSecret: "gloas-3ba02f02b3e993664ccdda2c4d76989caa11ce6f07a805b6872d266fbd465831"

## CSGHub self-defined service configuration
## Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

## Server configuration
server:
  ## Image configuration
  image:
    registry: "docker.io"
    repository: "opencsghq/csghub-server"
    # tag: "v1.1.0"
    pullPolicy: "IfNotPresent"
    pullSecrets: []

  ## Just for adaptation, no practical significance
  serviceAccount:
    create: false
    automount: false
    annotations: {}

  ## PostgreSQL database configuration
  postgresql:
    # host: ""
    # port: 5432
    user: "csghub"
    # password: ""
    database: "csghub_server"
    # timezone: "Etc/UTC"

  ## Redis configuration
  redis:
    host: ""
    port: 6379
    password: ""

  ## Gitaly configuration
  gitaly:
    host: ""
    port: 8075
    storage: "default"
    token: ""

  ## Object storage configuration
  objectStore:
    # endpoint: ""
    # accessKey: "minio"
    # secretKey: ""
    bucket: "csghub-server"
    # region: "cn-north-1"
    # encrypt: false
    # secure: true
    # pathStyle: true
    # directUpload: false

  ## Defined gitlab-shell external ssh port
  gitlabShell: {}
  # sshPort: 22

  ## Enable or Disable Multi-Sync
  multiSync:
    enabled: true
    ## If proxy enabled
    proxy:
      enabled: false
      ## Set your proxy address
      address: ""
      ## Follow domain will be proxied, pls keep it default.
      hosts: "opencsg.com;sync.opencsg.com;hub.opencsg.com"

  ## Enable Swagger API assistants
  swagger:
    enabled: false

  ## Log Level, eg: info, warning, debug, error
  logging:
    level: info

  ## Model Registry
  model: {}
    ## Defined model image registry, inference instance will pull images from
    # registry: "docker.io"

  ## Pod annotations and labels
  podAnnotations: {}
  podLabels: {}

  ## Security contexts
  podSecurityContext: {}
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  ## Environment variables
  environments: {}

  ## Deployment annotations
  annotations: {}

  ## Deployment resource requests
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  ## Node scheduling configuration
  nodeSelector: {}
  tolerations: []
  affinity: {}

## Portal configuration
portal:
  ## Image configuration
  image:
    pullSecrets: []
    registry: "docker.io"
    repository: "opencsghq/csghub-portal"
    # tag: "v1.1.0"
    pullPolicy: "IfNotPresent"

  ## Ingress configuration
  ingress:
    enabled: true
    tls:
      enabled: false
      secretName: ""
    annotations: {}

  ## Links to docs center (not for ce/ee)
  docs: {}
    ## If using domain, it'll create svc by ExternalName
    # domain: ""
    # host: "192.168.18.10"
    # port: "8003"

  ## PostgreSQL database configuration
  postgresql:
    # host: ""
    # port: 5432
    user: "csghub"
    # password: ""
    database: "csghub_portal"
    # timezone: "Etc/UTC"

  ## Object storage configuration
  objectStore:
    # endpoint: ""
    # accessKey: "minio"
    # secretKey: ""
    bucket: "csghub-portal-public"
    # region: "cn-north-1"
    # encrypt: false
    # secure: true
    # pathStyle: true

  ## Additional object storage configuration, user storage authentication data
  additionalObjectStore:
    bucket: "csghub-portal"

  ## SMTP configuration
  smtp: {}
    # host: ""
    # port: 465
    # username: ""
    # password: ""

  serviceAccount:
    create: false
    automount: false
    annotations: {}

## The following services are all derived services of csghub-server.
## For detailed configuration, please refer to csghub.server
## Accounting configuration
accounting: {}

## Dataviewer configuration
dataviewer: {}

## Gateway configuration
gateway: {}

## Mirror configuration
mirror: {}

## Notification configuration
notification:
  ## Set timezone
  repoSyncTime: "Asia/Shanghai"
  ## In the broadcast station internal message workflow,
  ## the user service will be accessed in batches to obtain the user uuid,
  ## and the page size for each access will be configured
  broadcastUserPageSize: 100
  ## When sending system broadcast email workflow,
  ## the user email address will be obtained in batches and then sent,
  ## controlling the number of emails obtained and sent at a time
  broadcastEmailPageSize: 100
  ## SMTP notify settings
  smtp: {}
    # host: ""
    # port: 465
    # username: ""
    # password: ""
  feiShu: {}
    ## FeiShu bot Application Id
    # appId: ""
    ## FeiShu bot Application Secret
    # appSecret: ""
    ## used to control the interval time of batch aggregation Feishu message job
    # batchSendMessageCronExpression: "*/10 * * * *"
    ## limit the size of FeiShu message sent at a time (cannot exceed 30k)
    # maxRequestContentSize: "20480"
    ## configures the longest delay time for each message
    # maxDelayDuration: "3600"
    ## configures the cache expiration time of Feishu chat ids
    # chatIdsCacheTTL: "21600"

## User configuration
user: {}

## Runner configuration
runner:
  ## Clearly identify the running mode, `true` means running as a subchart
  chartContext:
    isBuiltIn: true
  ## Disable all subCharts for install from csghub
  reloader:
    enabled: false

## More subChart configuration mappings are omitted here.
## Under normal circumstances, these configurations are not necessary.
## If necessary, you can check which parameters the subChart can configure and modify them.
## However, it should be noted that the current `autoscaling` is not adapted.

## For Csgship
## Note: Csgship is only available in EE edition
csgship:
  ## Csgship will only be deployed when BOTH conditions are met:
  ## 1. global.edition is set to "ee" (Enterprise Edition)
  ## 2. csgship.enabled is explicitly set to true
  ## If global.edition is "ce", csgship will never be deployed regardless of this setting
  enabled: false
  web:
    persistence:
      accessMode: ["ReadWriteOnce"]

## Dataflow Configuration
dataflow:
  ## Clearly identify the running mode, `true` means running as a subchart
  chartContext:
    isBuiltIn: true
  ## Disable all subCharts for install from csghub
  reloader:
    enabled: false

## In order to make the maintenance of csghub helm easier, the official ingress-nginx is directly referenced here as a subChart.
## This section of configuration is added for better adaptation, but this section of configuration is not within your modification scope.
## Unless you know what you are doing, please do not modify this section of configuration.
## PLEASE DO NOT UPDATE!!!
ingress-nginx:
  ## Enable the NGINX Ingress Controller
  enabled: true
  ## TCP services configuration
  tcp:
    ## Forward TCP traffic on port 22 to the specified service
    22: csghub/csghub-gitlab-shell:22
  ## NGINX Ingress Controller configuration
  controller:
    progressDeadlineSeconds: 600
    ## Configuration for the controller image
    ## Reset digest to use third-party repository
    ## DO NOT UPDATE!!! image.digest and admissionWebhooks.patch.image.digest
    image:
      image: opencsghq/ingress-nginx-controller
      ## Digest of the image for the controller
      digest: ""
    ## Configuration for admission webhooks
    admissionWebhooks:
      ## Patch settings for admission webhooks
      patch:
        ## Digest of the image for the admission webhook
        image:
          image: opencsghq/ingress-nginx-kube-webhook-certgen
          ## Digest of the image for the admission webhook
          digest: ""
    ## Configuration settings for the Ingress Controller
    config:
      ## Set the risk level for annotations; critical indicates high risk
      annotations-risk-level: Critical
      #      http-snippet: |
      #        limit_req_zone $binary_remote_addr zone=global:10m rate=20r/s;
      #        limit_conn_zone $binary_remote_addr zone=addr:10m;
      #      server-snippet: |
      #        limit_req zone=global burst=40;
      #        limit_conn addr 50;
      custom-http-errors: "404,500,502,503"
    ## Allow the use of server snippets in annotations
    allowSnippetAnnotations: true
    ## Configuration for the service exposed by the Ingress Controller
    service:
      type: *type
      ## Node ports for HTTP and HTTPS traffic
      nodePorts:
        ## Node port for HTTP traffic
        http: 30080
        ## Node port for HTTPS traffic
        https: 30443
        ## Node port for TCP traffic
        tcp:
          ## Node port for TCP traffic on port 22
          22: 30022
  ## Custom error pages
  defaultBackend:
    enabled: true
    image:
      image: opencsghq/ingress-nginx-custom-error-pages
      tag: v1.2.0
    extraVolumes:
      - name: custom-error-pages
        configMap:
          name: csghub-custom-error-pages
    extraVolumeMounts:
      - name: custom-error-pages
        mountPath: /www

## Reloader Configuration
reloader:
  image:
    name: "opencsghq/stakater-reloader"

## This section is used to configure how to collect pod logs in the current namespace.
## By default, they are directly output to the fluentd standard output in json format.
fluentd:
  enabled: false
  ## Image configuration
  image:
    repository: "opencsghq/fluent-fluentd-kubernetes-daemonset"
  ## Configuration for Fluentd file sources
  fileConfigs: {}

## Loki Configuration
loki:
  ## Enable or disable Loki ingress
  ingress:
    enabled: false
    ## Basic authentication configuration for Loki ingress
    basicAuth: {}
      # username: "loki"
      # password: "loki"
  memcached:
    image:
      registry: "docker.io"
  memcachedExporter:
    enabled: false
  sidecar:
    image:
      registry: "docker.io"
  ## Deployment mode for Loki (SingleBinary or MicroServices)
  deploymentMode: SingleBinary
  ## Configuration specific to single binary deployment
  singleBinary:
    ## Additional volume mounts for Loki container
    extraVolumeMounts:
      - name: storage
        mountPath: /loki
    ## Additional environment variables for Loki container
    extraEnv:
      - name: GOMEMLIMIT
        value: 3750MiB
  ## Enable or disable Loki canary for monitoring
  lokiCanary:
    enabled: false
  ## Enable or disable Loki gateway
  gateway:
    enabled: false
  ## Core Loki configuration
  loki:
    ## Enable or disable authentication
    auth_enabled: false
    ## Common configuration settings
    commonConfig:
      replication_factor: 1
      path_prefix: /loki
      ring:
        kvstore:
          store: inmemory
    ## Storage configuration
    storage:
      type: filesystem
    ## Schema configuration for data organization
    schemaConfig:
      configs:
        - from: 2024-04-01
          store: tsdb
          object_store: filesystem
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    ## Ingester configuration for data ingestion
    ingester:
      chunk_encoding: snappy
    ## Enable or disable tracing
    tracing:
      enabled: false
    ## Querier configuration for query processing
    querier:
      max_concurrent: 2
  ## Enable or disable test configuration
  test:
    enabled: false
  ## Chunks cache configuration
  chunksCache:
    writebackSizeLimit: 10MB
    ## Resource limits for chunks cache
    resources:
      limits:
        memory: 4096Mi
      requests:
        memory: 2048Mi
  ## Results cache configuration
  resultsCache:
    ## Resource limits for results cache
    resources:
      limits:
        memory: 1024Mi
      requests:
        memory: 512Mi

## Enable or disable Tempo (distributed tracing)
tempo:
  enabled: true

## Enable or disable Prometheus
prometheus:
  enabled: true
  ## Prometheus ingress configuration
  ingress:
    enabled: false
    ## Basic authentication for Prometheus ingress
    basicAuth: {}
      # username: "prometheus"
      # password: ""
  ## Enable or disable Alertmanager
  alertmanager:
    enabled: false
  ## Enable or disable Prometheus pushgateway
  prometheus-pushgateway:
    enabled: false
  ## Enable or disable Prometheus node exporter
  prometheus-node-exporter:
    enabled: false
  ## Server configuration for Prometheus
  server:
    ## Image configuration for Prometheus server
    image:
      ## Registry for Prometheus server image
      registry: "quay.io"
      ## Repository for Prometheus server image
      repository: prometheus/prometheus
      ## Tag for Prometheus server image
      tag: v3.5.0
  ## ConfigMap reload configuration for Prometheus
  configmapReload:
    ## Prometheus-specific configmap reload settings
    prometheus:
      ## Image configuration for configmap reloader
      image:
        ## Registry for configmap reloader image
        registry: "quay.io"
        ## Repository for configmap reloader image
        repository: "prometheus-operator/prometheus-config-reloader"
        ## Tag for configmap reloader image
        tag: v0.85.0
  ## Kube-state-metrics configuration
  kube-state-metrics:
    ## Image configuration for kube-state-metrics
    image:
      ## Tag for kube-state-metrics image
      tag: v2.17.0
