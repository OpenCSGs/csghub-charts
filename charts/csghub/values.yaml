## Global configuration will override subChart's configuration
global:
  ## Deployment edition: "ce" (Community) or "ee" (Enterprise)
  edition: "ee"

  ## Image configuration
  image:
    ## Image registry path (without trailing slash)
    ## It's cannot be set to nil, comment out using original image default.
    # registry: "opencsg-registry.cn-beijing.cr.aliyuncs.com"
    ## Image repository
    # name: "opencsghq/csghub-server"
    ## Image tag format: {{ tag }}-{{ edition }} (e.g., v1.8.1-ee)
    tag: "v1.8.1"
    ## Image pull policy
    pullPolicy: "IfNotPresent"
    ## Kubernetes secrets for pulling images from private registry
    pullSecrets: [ ]

  ## Pod Disruption Budget configuration
  pdb:
    create: false
    minAvailable: 1
    # maxUnavailable: 1

  ## Ingress configuration
  ingress:
    # className: "nginx"
    ## Domain name for accessing csghub
    domain: example.com
    ## TLS configuration
    tls: { }
      # enabled: false
      # secretName: ""
    service:
      ## Service type for ingress (LoadBalancer or NodePort)
      type: &type LoadBalancer

  ## Registry configuration
  registry:
    enabled: true
    ## Disable TLS/SSL encryption
    insecure: false
    # repository: "https://registry-1.docker.io"
    # namespace: "csghub"
    # username: "registry"
    # password: ""

  ## PostgreSQL database configuration
  postgresql:
    enabled: true
    ## External PostgreSQL configuration
    # host: "<pg_host>"
    # port: 6432
    # user: "csghub"
    # timezone: "Etc/UTC"

  ## Redis configuration
  redis:
    enabled: true
    ## External Redis configuration
    # host: "<redis_host>"
    # port: 6379
    # password: ""

  ## Object storage configuration
  objectStore:
    ## Use built-in (true) or external (false) object storage
    enabled: true
    ## External object storage configuration
    # endpoint: "http://minio.<domain>"
    # accessKey: "minio"
    # secretKey: ""
    # region: "cn-north-1"
    # encrypt: false
    # secure: false
    # pathStyle: true

  ## Gitaly configuration
  gitaly:
    ## Use built-in (true) or external (false) gitaly
    enabled: true
    ## Enable Gitaly cluster (EE only)
    isCluster: false
    ## External Gitaly configuration
    # host: "<gitaly_host>"
    # port: 8075
    # storage: "default"
    # token: ""

  ## Content moderation configuration
  moderation:
    enabled: false

  ## Deployment configuration for instances
  deploy:
    enabled: true
    ## Kubernetes secret for deployment configurations
    kubeSecret: "csghub-kube-configs"
    ## Namespace for deployment
    namespace: "spaces"
    ## Auto-install knative and argo
    autoConfigure: true
    ## Reduce number of created namespaces
    mergingNamespace: false
    ## Knative serving configuration
    knative:
      serving:
        services:
          ## Knative service type (LoadBalancer or NodePort)
          - type: NodePort
            ## Internal domain for service access
            domain: "app.internal"
            ## API server host address
            # host: "192.168.18.10"
            ## Service port (NodePort value when type is NodePort)
            # port: "30213"
    ## Custom pip repository URL
    pipIndexUrl: "https://pypi.tuna.tsinghua.edu.cn/simple/"
    ## Image builder configuration
    imageBuilder:
      namespace: "image-factory"
    ## Use public domain for deployments
    usePublicDomain: true

  ## Persistent storage configuration
  persistence: { }
    # storageClass: ""
  # accessMode: ["ReadWriteOnce"]

  ## Starship OAuth configuration
  starship:
    oauth: {}
      # issuer: "https://gitlab.example.com"
      # clientId: "73f1c2922f51d68fa87de8c1ef0e23e8940f3aa42f5ac7a55a1f586c597d7e9c"
    # clientSecret: "gloas-3ba02f02b3e993664ccdda2c4d76989caa11ce6f07a805b6872d266fbd465831"

  ## Dataflow configuration
  dataflow:
    enabled: false

## CSGHub self-defined service configuration
csghub:
  ## Autoscaling configuration
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  ## Server configuration
  server:
    ## Image configuration
    image:
      registry: "docker.io"
      repository: "opencsghq/csghub-server"
      # tag: "v1.1.0"
      pullPolicy: "IfNotPresent"
      pullSecrets: [ ]

    ## Just for adaptation, no practical significance
    serviceAccount:
      create: false
      automount: false
      annotations: { }

    ## PostgreSQL database configuration
    postgresql:
      host: ""
      port: 5432
      user: "csghub_server"
      password: ""
      database: "csghub_server"
      timezone: "Etc/UTC"

    ## Redis configuration
    redis:
      host: ""
      port: 6379
      password: ""

    ## Gitaly configuration
    gitaly:
      host: ""
      port: 8075
      storage: "default"
      token: ""

    ## Object storage configuration
    objectStore:
      endpoint: ""
      accessKey: "minio"
      secretKey: ""
      bucket: "csghub-server"
      region: "cn-north-1"
      # encrypt: "false"
      # secure: "true"
      pathStyle: "true"
      directUpload: "false"

    ## Pod annotations and labels
    podAnnotations: { }
    podLabels: { }

    ## Security contexts
    podSecurityContext: { }
    securityContext: { }
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000

    ## Environment variables
    environments: { }

    ## Deployment annotations
    annotations: { }

    ## Deployment resource requests
    resources:
       limits:
         cpu: 100m
         memory: 128Mi
       requests:
         cpu: 100m
         memory: 128Mi

    ## Node scheduling configuration
    nodeSelector: { }
    tolerations: [ ]
    affinity: { }

  ## Runner configuration
  runner:
    ## Docker registry configuration
    registry:
      ## Docker registry URL
      repository: ""
      ## Image namespace/organization
      namespace: "csghub"
      ## Registry username
      username: "registry"
      ## Registry password
      password: ""
      ## Disable TLS/SSL verification
      insecure: true

    ## Auto-label configuration
    autoLabel:
      image:
        ## Image registry path
        registry: "docker.io"
        ## Image repository
        repository: "opencsghq/gpu_gather"
        ## Image tag
        tag: "latest"
      cli:
        ## CLI image for GPU detection
        image: "nvidia/cuda:12.0.0-base-ubi8"
        ## CLI command to detect GPUs
        cmd: "nvidia-smi --query-gpu=name --format=csv,noheader"

    ## Object storage configuration
    objectStore:
      endpoint: "http://minio.<domain>"
      accessKey: "minio"
      secretKey: ""
      bucket: "csghub-workflow"
      region: "cn-north-1"
      # encrypt: "false"
      # secure: "true"
      pathStyle: "true"

  ## Portal configuration
  portal:
    ## Image configuration
    image:
      pullSecrets: [ ]
      registry: "docker.io"
      repository: "opencsghq/csghub-portal"
      # tag: "v1.1.0"
      pullPolicy: "IfNotPresent"

    ## Ingress configuration
    ingress:
      enabled: true
      tls:
        enabled: false
        secretName: ""
      annotations: { }

    ## Links to docs center (not for ce/ee)
    docs: { }
      ## If using domain, it'll create svc by ExternalName
      # domain: ""
      # host: "192.168.18.10"
      # port: "8003"

    ## PostgreSQL database configuration
    postgresql:
      host: ""
      port: 5432
      user: "csghub_portal"
      password: ""
      database: "csghub_portal"
      timezone: "Etc/UTC"

    ## Object storage configuration
    objectStore:
      endpoint: ""
      accessKey: "minio"
      secretKey: ""
      bucket: "csghub-portal"
      region: "cn-north-1"
      # encrypt: "false"
      # secure: "true"
      pathStyle: "true"

    ## SMTP configuration
    smtp:
      host: ""
      port: 465
      username: ""
      password: ""

    serviceAccount:
      create: false
      automount: false
      annotations: { }

  ## The following services are all derived services of csghub-server.
  ## For detailed configuration, please refer to csghub.server
  ## Accounting configuration
  accounting: { }

  ## Dataviewer configuration
  dataviewer: { }

  ## Gateway configuration
  gateway: { }

  ## Mirror configuration
  mirror: { }

  ## Notification configuration
  notification: { }

  ## User configuration
  user: { }

## More subChart configuration mappings are omitted here.
## Under normal circumstances, these configurations are not necessary.
## If necessary, you can check which parameters the subChart can configure and modify them.
## However, it should be noted that the current `autoscaling` is not adapted.

## For Starship
## Note: Starship is only available in EE edition
starship:
  ## Starship will only be deployed when BOTH conditions are met:
  ## 1. global.edition is set to "ee" (Enterprise Edition)
  ## 2. starship.enabled is explicitly set to true
  ## If global.edition is "ce", starship will never be deployed regardless of this setting
  enabled: false
  web:
    persistence:
      accessMode: ["ReadWriteOnce"]

## For Dataflow
dataflow:
  ## You can only define configuration hereï¼Œ Control whether enabled in global.dataflow
  ## Configure AI Service
  openAI: { }
    ## The API endpoint address, e.g., "https://api.openai.com/v1/"
    # endpoint: ""
    ##  Your OpenAI API key used for authentication
    # apiKey: ""
    ## The version of the API being used, e.g., "v1"
    # apiVersion: ""
    ## The name of the model you want to use, e.g., "text-davinci-003"
    # model: ""

## In order to make the maintenance of csghub helm easier, the official ingress-nginx is directly referenced here as a subChart.
## This section of configuration is added for better adaptation, but this section of configuration is not within your modification scope.
## Unless you know what you are doing, please do not modify this section of configuration.
## PLEASE DO NOT UPDATE!!!
ingress-nginx:
  ## Enable the NGINX Ingress Controller
  enabled: true
  ## TCP services configuration
  tcp:
    ## Forward TCP traffic on port 22 to the specified service
    22: csghub/csghub-gitlab-shell:22
  ## NGINX Ingress Controller configuration
  controller:
    ## Configuration for the controller image
    ## Reset digest to use third-party repository
    ## DO NOT UPDATE!!! image.digest and admissionWebhooks.patch.image.digest
    image:
      image: opencsghq/ingress-nginx-controller
      ## Digest of the image for the controller
      digest: ""
    ## Configuration for admission webhooks
    admissionWebhooks:
      ## Patch settings for admission webhooks
      patch:
        ## Digest of the image for the admission webhook
        image:
          image: opencsghq/ingress-nginx-kube-webhook-certgen
          ## Digest of the image for the admission webhook
          digest: ""
    ## Configuration settings for the Ingress Controller
    config:
      ## Set the risk level for annotations; critical indicates high risk
      annotations-risk-level: Critical
    #      http-snippet: |
    #        limit_req_zone $binary_remote_addr zone=global:10m rate=20r/s;
    #        limit_conn_zone $binary_remote_addr zone=addr:10m;
    #      server-snippet: |
    #        limit_req zone=global burst=40;
    #        limit_conn addr 50;
      custom-http-errors: "404,500,502,503"
    ## Allow the use of server snippets in annotations
    allowSnippetAnnotations: true
    ## Configuration for the service exposed by the Ingress Controller
    service:
      type: *type
      ## Node ports for HTTP and HTTPS traffic
      nodePorts:
        ## Node port for HTTP traffic
        http: 30080
        ## Node port for HTTPS traffic
        https: 30443
        ## Node port for TCP traffic
        tcp:
          ## Node port for TCP traffic on port 22
          22: 30022
  ## Custom error pages
  defaultBackend:
    enabled: true
    image:
      image: opencsghq/ingress-nginx-custom-error-pages
      tag: v1.2.0
    extraVolumes:
      - name: custom-error-pages
        configMap:
          name: csghub-custom-error-pages
    extraVolumeMounts:
      - name: custom-error-pages
        mountPath: /www

reloader:
  image:
    name: "opencsghq/stakater-reloader"
## This section is used to configure how to collect pod logs in the current namespace.
## By default, they are directly output to the fluentd standard output in json format.
fluentd:
  enabled: false
  ## Image configuration
  image:
    repository: "opencsghq/fluent-fluentd-kubernetes-daemonset"
  ## Configuration for Fluentd file sources
  fileConfigs:
    # Configuration for sources
    01_sources.conf: |-
      <source>
        @type tail
        @id in_tail_container_logs
        @label @KUBERNETES
        path /var/log/containers/*.log
        pos_file /var/log/fluentd-containers.log.pos
        tag kubernetes.*
        read_from_head true
        <parse>
          @type json
        </parse>
        emit_unmatched_lines false
      </source>
      # expose metrics in prometheus format
      <source>
        @type prometheus
        bind 0.0.0.0
        port 24231
        metrics_path /metrics
      </source>
      <system>
        log_level debug
      </system>
    # Configuration for filters
    02_filters.conf: |-
      <label @KUBERNETES>
        <filter kubernetes.**>
          @type kubernetes_metadata
          @id filter_kube_metadata
          lookup_from_k8s_field true
          skip_namespace_metadata true
          skip_master_url true
        </filter>
        <filter kubernetes.var.log.containers.**>
          @type grep
          <regexp>
            key $.kubernetes.labels
            pattern /csghub/
          </regexp>
        </filter>
        <match kubernetes.var.log.containers.**fluentd**>
          @type null
        </match>
        <match **>
          @type relabel
          @label @DISPATCH
        </match>
      </label>
    # Configuration for dispatching logs
    03_dispatch.conf: |-
      <label @DISPATCH>
        <match **>
          @type relabel
          @label @OUTPUT
        </match>
      </label>
    # Configuration for outputs
    04_outputs.conf: |-
      <label @OUTPUT>
        <match **>
          @type stdout
          <format>
            @type json
            localtime true
          </format>
        </match>
      </label>