{{- /*
Copyright OpenCSG, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/ -}}

apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.custom" (list . "worker") }}
  namespace: {{ .Release.Namespace }}
  labels: {{ include "common.labels" (dict "context" . "service" "worker") | nindent 4 }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      {{- include "common.serviceSelectorLabels" (dict "selector" true "context" . "service" "worker") | nindent 6 }}
  replicas: {{ .Values.worker.replicas }}
  revisionHistoryLimit: 1
  minReadySeconds: 30
  template:
    metadata:
      annotations:
      {{- with .Values.worker.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "common.labels" (dict "context" . "service" "worker") | nindent 8 }}
    spec:
      {{- with (or .Values.dataflow.image.pullSecrets .Values.image.pullSecrets .Values.global.image.pullSecrets) }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      {{- with .Values.worker.securityContext }}
      securityContext:
        {{- . | toYaml | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: wait-for-postgresql
          image: {{ include "image.fixed.prefix" (list . "opencsghq/psql:latest") }}
          imagePullPolicy: {{ or .Values.dataflow.image.pullPolicy .Values.global.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              until psql {{ include "csghub.postgresql.dsn" (dict "service" .Values.dataflow "global" .) | quote }} -c 'SELECT 1';
              do
                echo 'Wait for PostgreSQL to be ready';
                sleep 2;
              done;
        - name: wait-for-redis
          image: {{ include "image.generic.prefix" (list . .Values.redis.image) }}
          imagePullPolicy: {{ or .Values.dataflow.image.pullPolicy .Values.image.pullPolicy .Values.global.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              until redis-cli -u $(REDIS_HOST_URL) ping;
              do
                echo 'Wait for Redis to be ready';
                sleep 2;
              done;
          envFrom:
            - configMapRef:
                name: {{ include "common.names.custom" (list . "dataflow") }}
        - name: wait-for-mongo
          image: {{ include "image.generic.prefix" (list . .Values.mongo.image) }}
          imagePullPolicy: {{ or .Values.dataflow.image.pullPolicy .Values.image.pullPolicy .Values.global.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              until mongosh $(MONG_HOST_URL)/admin --eval "db.adminCommand('ping')" | grep "ok.*1";
              do
                echo 'Wait for Mongo to be ready';
                sleep 2;
              done;
          envFrom:
            - configMapRef:
                name: {{ include "common.names.custom" (list . "dataflow") }}
      containers:
        - name: worker
          image: {{ include "image.generic.prefix" (list . .Values.dataflow.image) }}
          imagePullPolicy: {{ or .Values.dataflow.image.pullPolicy .Values.image.pullPolicy .Values.global.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              MILLISECOND_TIMESTAMP=$$(date +%s%3N);
              NODENAME=worker_$$MILLISECOND_TIMESTAMP@$$(hostname -f);
              celery -A data_celery.main:celery_app worker --loglevel={{ .Values.worker.logging.level }} --pool=gevent -n $$NODENAME
          envFrom:
            - configMapRef:
                name: {{ include "common.names.custom" (list . "dataflow") }}
          {{- with .Values.dataflow.environments }}
          env:
          {{- range $key, $value := . }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{- end }}
          {{- end }}
          {{- with .Values.worker.resources }}
          resources:
            {{- with .requests }}
            requests:
              cpu: {{ .cpu | default "100m" }}
              memory: {{ .memory | default "128Mi"}}
            {{- end }}
            {{- with .limits }}
            limits:
              cpu: {{ .cpu | default "200m" }}
              memory: {{ .memory | default "256Mi"}}
            {{- end }}
          {{- end }}
          securityContext:
            {{- .Values.worker.podSecurityContext | toYaml | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /data/dataflow
              readOnly: false
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ printf "data-%s-%s-0" .Release.Name "dataflow" }}
      {{- with .Values.worker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.worker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.worker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
