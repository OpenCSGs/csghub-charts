{{- /*
Copyright OpenCSG, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.custom" (list . "logcollector") }}
  namespace: {{ .Release.Namespace }}
  labels: {{ include "common.labels" (dict "context" . "service" "logcollector") | nindent 4 }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      {{- include "common.serviceSelectorLabels" (dict "selector" true "context" . "service" "logcollector") | nindent 6 }}
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: 1
  minReadySeconds: 30
  template:
    metadata:
      annotations:
      {{- with .Values.podAnnotations }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "common.labels" (dict "context" . "service" "logcollector") | nindent 8 }}
    spec:
      {{- with (or .Values.image.pullSecrets .Values.global.image.pullSecrets) }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      {{- with .Values.securityContext }}
      securityContext:
        {{- . | toYaml | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 10
      {{- if .Values.rbac.create }}
      serviceAccountName: "runner-admin"
      automountServiceAccountToken: true
      {{- end }}
      containers:
        - name: logcollector
          {{- $tag := include "csghub.image.tag" (dict "tag" (or .Values.image.tag .Values.global.image.tag) "context" .) }}
          {{- $_ := set .Values.image "tag" $tag }}
          image: {{ include "image.generic.prefix" (list . .Values.image) }}
          imagePullPolicy: {{ or .Values.image.pullPolicy .Values.global.image.pullPolicy }}
          command: [ "/starhub-bin/starhub", "deploy", "logcollector", "-l", "{{ .Values.logging.level }}" ]
          ports:
            - containerPort: 8096
              name: logcollector
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ include  "common.names.custom" (list . "runner") }}
          {{- with .Values.environments }}
          env:
            {{- range $key, $value := . }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- with .requests }}
            requests:
              cpu: {{ .cpu | default "100m" }}
              memory: {{ .memory | default "128Mi"}}
            {{- end }}
            {{- with .limits }}
            limits:
              cpu: {{ .cpu | default "200m" }}
              memory: {{ .memory | default "256Mi"}}
            {{- end }}
          {{- end }}
          livenessProbe:
            tcpSocket:
              port: 8096
            initialDelaySeconds: 20
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8096
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3
          securityContext:
            {{- .Values.podSecurityContext | toYaml | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
