## Global configuration will override subChart's configuration
global:

  ## Image configuration
  image:
    ## Image registry path (without trailing slash)
    # registry: "opencsg-registry.cn-beijing.cr.aliyuncs.com"
    ## Image tag format: {{ tag }}-{{ edition }} (e.g., v1.8.1-ee)
    tag: "v1.11.0-ee"
    ## Image pull policy
    pullPolicy: "IfNotPresent"
    ## Kubernetes secrets for pulling images from private registry
    pullSecrets: []

  ## Kubernetes Namespace Configuration
  namespace: "spaces"

  ## Auto-Configuration Settings
  ## Automatically install Knative, Argo and LWS dependencies
  autoConfigure: true

  ## Namespace Merging Strategy
  ## Options: "Multi" (multiple namespaces), "Single" (merge to one), "Disable" (no merging)
  mergingNamespace: "Disable"

  ## Knative Serving Configuration
  knative:
    serving:
      ## Internal domain for Knative services
      ## It will generate ksvc with domain suffix http://<uuid>.<namespace>.<knative.serving.domain>
      domain: "example.com"

  ## Python Package Index Configuration
  ## Alternative: "https://pypi.org/simple/"
  pipIndexUrl: "https://pypi.tuna.tsinghua.edu.cn/simple/"

  ## Domain Usage Configuration
  usePublicDomain: true  # Use public domains for deployments vs internal only

  ## Ingress Configuration
  ingress:
    ## Ingress controller class name
    className: "nginx"
    ## Base domain name for all ingress routes
    domain: "example.com"
    ## Custom domain prefixes for different services
    ## Example: { public: "app", runner: "runner-api" }
    customDomainPrefixes: {}
    ## Use top-level domain directly (true) or subdomains (false)
    ## true: https://example.com, false: https://runner.example.com
    useTop: false
    ## TLS/SSL configuration for ingress
    tls: {}
      # enabled: true
      # secretName: "csghub-tls-cert"
    service:
      ## Service type for exposing the runner
      ## Options: LoadBalancer, NodePort, ClusterIP
      type: &type LoadBalancer

  ## Container Registry configuration
  registry:
    ## Use built-in (true) or external (false) container registry
    enabled: true
    ## External Container Registry configuration
    external: {}
      ## URL of the external container registry
      # registry: "registry-1.docker.io"
      ## Repository namespace in the external registry
      # repository: "csghub"
      ## Username for authenticating with the external registry
      # username: "registry"
      ## Password for authenticating with the external registry
      # password: ""
      ## Disable TLS/SSL encryption for the registry connection
      # insecure: false

  ## Object storage configuration
  objectStore:
    ## Use built-in (true) or external (false) object storage
    enabled: true
    ## External Object Storage configuration
    external: {}
      ## Endpoint URL for the object storage service
      # endpoint: "http://minio.<domain>"
      ## Access key for object storage authentication
      # accessKey: "minio"
      ## Secret key for object storage authentication
      # secretKey: ""
      ## Region where the bucket is located
      # region: "cn-north-1"
      ## Enable server-side encryption for objects
      # encrypt: false
      ## Use HTTPS for connections to the object storage
      # secure: false
      ## Use path-style addressing for the bucket (vs virtual-hosted style)
      # pathStyle: true

######################################################
## For CSGHub Runner Local Configuration
######################################################
## External CSGHub URL for accessing the hub interface
externalUrl: "https://csghub.example.com"

## API token for authenticating with CSGHub API
hubAPIToken: ""

## Unique identifier for the origin cluster
# originClusterID: "37913ede-1bbe-4b7c-a3ee-db6d568ac2c2"

## Define num of replicas
replicas: 1

## Region of runner
region: "cn-beijing"

## Data Reporting Interval
interval: 60

## Image Configuration
image:
  ## Docker registry URL
  registry: "docker.io"
  ## Repository name for the runner image
  repository: "opencsghq/csghub-server"
  ## Image tag version
  # tag: "v1.11.0-ee"
  ## Image pull policy (Always, IfNotPresent, Never)
  pullPolicy: "IfNotPresent"
  ## List of secret names for pulling from private registries
  pullSecrets: []

## Ingress Configuration
ingress:
  tls: {}
    # enabled: true
    # secretName: "csghub-tls-cert"

## RBAC Configuration
rbac:
  ## Create RBAC resources (ServiceAccount, Role, RoleBinding, ClusterRole, ClusterRoleBinding)
  create: true

## Container Registry Configuration
registry: {}
  ## Container registry endpoint
  # registry: ""
  ## Default repository prefix for pushed images
  # repository: "csghub"
  ## Registry authentication username
  # username: "registry"
  ## Registry authentication password/token
  # password: ""
  ## Allow insecure registry connections (not recommended for production)
  # insecure: false

## Object Storage Configuration (S3-compatible)
objectStore: {}
  ## External object storage configuration (only used when enabled: false)
  ## Object storage endpoint URL
  # endpoint: ""
  ## Access key for object storage
  # accessKey: "minio"
  ## Secret key for object storage
  # secretKey: ""
  ## Bucket for object storage
  # bucket: "csghub-evaluation"
  ## Storage region
  # region: "cn-north-1"
  ## Use HTTPS for secure connections
  # secure: true
  ## Enable server-side encryption (if supported)
  # encrypt: false
  ## Use path-style addressing (required for some S3 implementations like MinIO)
  # pathStyle: true

## Logging Integration
loki:
  ## Loki log aggregation service endpoint
  address: "https://loki.example.com"

## GPU Configuration
gpuModelLabel:
  typeLabel: "nvidia.com/gpu.product"
  capacityLabel: "nvidia.com/gpu"

## Define argo serviceAccount
argo:
  serviceAccount: "executor"

## Logging Configuration
logging:
  ## Log level (debug, info, warning, error)
  level: "info"

## Model Registry
model: {}
  ## Defined model image registry, inference instance will pull images from
  # registry: ""

## Forward tracing to tempo
tempo: {}
  # endpoint: ""

## Pod Metadata
podAnnotations: {}
  ## Example: { "prometheus.io/scrape": "true", "prometheus.io/port": "9090" }

podLabels: {}
  ## Example: { "app.kubernetes.io/component": "runner", "environment": "production" }

## Security Contexts
podSecurityContext: {}
  ## Example: { fsGroup: 2000, runAsNonRoot: true, runAsUser: 1000 }

securityContext: {}
  ## Example:
  # capabilities:
  #   drop: ["ALL"]
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## Environment Variables
environments: {}
## Example: { DEBUG: "false", MAX_WORKERS: "10", TIMEOUT: "300" }

## Deployment Annotations
annotations: {}
## Example: { "reloader.stakater.com/auto": "true" }

## Resource Quota enabled
resourceQuota:
  enabled: false

## Resource Requests and Limits
resources: {}
  ## Example:
  # requests:
  #   memory: "256Mi"
  #   cpu: "250m"
  # limits:
  #   memory: "512Mi"
  #   cpu: "500m"

## Node Scheduling Configuration
nodeSelector: {}
  ## Example: { "node-type": "compute-optimized", "gpu": "true" }

tolerations: []
  ## Example:
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "csghub"
  #   effect: "NoSchedule"

affinity: {}
  ## Example:
  # podAntiAffinity:
  #   preferredDuringSchedulingIgnoredDuringExecution:
  #   - weight: 100
  #     podAffinityTerm:
  #       labelSelector:
  #         matchExpressions:
  #         - key: "app"
  #           operator: "In"
  #           values: ["runner"]
  #       topologyKey: "kubernetes.io/hostname"

## Clearly identify the running mode, `true` means running as a subchart
chartContext:
  isBuiltIn: false

## PLEASE DO NOT UPDATE!!!
ingress-nginx:
  ## Enable the NGINX Ingress Controller
  enabled: false
  ## NGINX Ingress Controller configuration
  controller:
    progressDeadlineSeconds: 600
    ## Configuration for the controller image
    ## Reset digest to use third-party repository
    ## DO NOT UPDATE!!! image.digest and admissionWebhooks.patch.image.digest
    image:
      image: opencsghq/ingress-nginx-controller
      ## Digest of the image for the controller
      digest: ""
    ## Configuration for admission webhooks
    admissionWebhooks:
      ## Patch settings for admission webhooks
      patch:
        ## Digest of the image for the admission webhook
        image:
          image: opencsghq/ingress-nginx-kube-webhook-certgen
          ## Digest of the image for the admission webhook
          digest: ""
    ## Configuration settings for the Ingress Controller
    config:
      ## Set the risk level for annotations; critical indicates high risk
      annotations-risk-level: Critical
      #      http-snippet: |
      #        limit_req_zone $binary_remote_addr zone=global:10m rate=20r/s;
      #        limit_conn_zone $binary_remote_addr zone=addr:10m;
      #      server-snippet: |
      #        limit_req zone=global burst=40;
      #        limit_conn addr 50;
      custom-http-errors: "404,500,502,503"
    ## Allow the use of server snippets in annotations
    allowSnippetAnnotations: true
    ## Configuration for the service exposed by the Ingress Controller
    service:
      type: *type
      ## Node ports for HTTP and HTTPS traffic
      nodePorts:
        ## Node port for HTTP traffic
        http: 30080
        ## Node port for HTTPS traffic
        https: 30443
        ## Node port for TCP traffic
        tcp:
          ## Node port for TCP traffic on port 22
          22: 30022
  ## Custom error pages
  defaultBackend:
    enabled: true
    image:
      image: opencsghq/ingress-nginx-custom-error-pages
      tag: v1.2.0
    extraVolumes:
      - name: custom-error-pages
        configMap:
          name: csghub-custom-error-pages
    extraVolumeMounts:
      - name: custom-error-pages
        mountPath: /www

## Using reloader to online reload configmaps and secrets
reloader:
  image:
    name: "opencsghq/stakater-reloader"

## Enable or disable Prometheus
prometheus:
  enabled: false
  ## Enable or disable Alertmanager
  alertmanager:
    enabled: false
  ## Enable or disable Prometheus pushgateway
  prometheus-pushgateway:
    enabled: false
  ## Enable or disable Prometheus node exporter
  prometheus-node-exporter:
    enabled: false
  ## Server configuration for Prometheus
  server:
    ## Sending metrics to remote prometheus server
    remoteWrite:
      - url: ""
        basic_auth: {}
          # username: "<username>"
          # password: "<password>"
    ## Image configuration for Prometheus server
    image:
      ## Registry for Prometheus server image
      registry: "quay.io"
      ## Repository for Prometheus server image
      repository: prometheus/prometheus
      ## Tag for Prometheus server image
      tag: v3.5.0
  ## ConfigMap reload configuration for Prometheus
  configmapReload:
    ## Prometheus-specific configmap reload settings
    prometheus:
      ## Image configuration for configmap reloader
      image:
        ## Registry for configmap reloader image
        registry: "quay.io"
        ## Repository for configmap reloader image
        repository: "prometheus-operator/prometheus-config-reloader"
        ## Tag for configmap reloader image
        tag: v0.85.0
  ## Kube-state-metrics configuration
  kube-state-metrics:
    ## Image configuration for kube-state-metrics
    image:
      ## Tag for kube-state-metrics image
      tag: v2.17.0
