#################################################################
##  Global Configuration                                       ##
#################################################################
global:
  ## Ingress configuration
  ingress:
    # className: "nginx"            # Ingress controller class name
    domain: "example.com"           # Base domain for accessing csghub
    useTop: false                   # Use top-level domain directly (true) or subdomain (false)
    ## TLS/SSL configuration
    tls:
      enabled: false                # Enable or disable TLS
      # secretName: ""                # TLS secret name (if enabled)
    ## Service configuration
    service:
      type: &type "LoadBalancer"          # Service type: LoadBalancer or NodePort

  ## Image management
  image:
    # registry: ""                  # Custom image registry (overrides local registry)
    tag: "v1.11.0"                  # Image tag format: {{version}}-{{edition}}
    pullPolicy: "IfNotPresent"      # Image pull policy: Always, IfNotPresent, Never
    pullSecrets: []                 # Private registry authentication secrets

  ## Disable internal Registry (It's Only a flag)
  registry:
    enabled: false

  ## Disable internal ObjectStore (It's Only a flag)
  objectStore:
    enabled: false

  ## SubChart deployment context
  chartContext:
    isBuiltIn: false                     # deployed bundled with csghub

#################################################################
##  CSGHub Configuration                                       ##
#################################################################
## External CSGHub URL for accessing the hub interface
externalUrl: "https://csghub.example.com"

## Global image configuration
image:
  registry: "docker.io"                    # Docker registry
  repository: "opencsghq/csghub-server"
  tag: "v1.11.0"                           # Image version tag
  pullPolicy: "IfNotPresent"               # Image pull policy: Always, IfNotPresent, Never
  pullSecrets: []                          # Docker registry secrets

## Ingress configuration
ingress:
  enabled: true                            # Enable or disable ingress
  annotations: {}                          # Ingress-nginx annotations
  tls: {}                                  # TLS settings for ingress
    # enabled: false                       # Enable or disable TLS
    # secretName: ""                       # TLS secret name (if enabled)

## API token for authenticating with CSGHub API
hubAPIToken: ""

## Unique identifier for the origin cluster
originClusterID: ""

## Logging configuration
logging:
  level: "info"                            # Log level: info, warning, debug, error

#################################################################
##  Runner Configuration                                       ##
#################################################################
## Defined resource name
name: "runner"

## Service Configuration
service:
  type: "ClusterIP"                        # Service type: ClusterIP, NodePort, LoadBalancer
  port: 8082                               # Service port
  protocol: "TCP"                          # Network protocol

## Runner operation and communication
region: "region-0"                     # Region the runner belongs to
interval: 60                           # Communication interval with server (seconds)

## Namespace management
namespace: "spaces"                    # Namespace for user-deployed workloads
autoConfigure: true                    # Automatically install knative/argo/lws
mergingNamespace: "disable"            # Namespace merging: multi, single, disable

## Networking configuration
usePublicDomain: true                  # Use public domain for application access

## Package and image management
pipIndexUrl: "https://pypi.tuna.tsinghua.edu.cn/simple/"  # Custom pip repository
extraBuildArgs: []                     # Extra Kaniko build arguments
modelRegistry: ""                      # Model image configuration

## GPU resource configuration
gpuModelLabel:
  typeLabel: "nvidia.com/gpu.product"  # GPU type label
  capacityLabel: "nvidia.com/gpu"      # GPU capacity label

## Knative Serving configuration
knative:
  serving:
    domain: "example.com"              # Domain suffix for Knative services

    ## Deprecated configuration (for backward compatibility)
    services: []
      # - type: "LoadBalancer"           # Service type: LoadBalancer or NodePort
      #   domain: "example.com"          # Internal service domain
      #   host: "192.168.18.10"        # API server host address
      #   port: "30213"                # NodePort value when type=NodePort

## RBAC Configuration
rbac:
  create: true                         # Create SA, Role, RoleBinding, ClusterRole, ClusterRoleBinding
  serviceAccountName: "runner-admin"   # serviceAccountName created by rbac

## Logcollector Configuration
logcollector:
  enabled: false

  ## Logging Integration Configuration
  loki:
    address: ""

## Trace Logging Configuration
tempo:
  address: ""

## Registry Configuration
registry: {}
  # registry: ""                           # External registry URL
  # repository: "csghub"                   # Repository namespace
  # username: ""                           # Registry username
  # password: ""                           # Registry password
  # insecure: "false"                      # Disable TLS/SSL encryption

## ObjectStore Configuration
objectStore: {}                            # External object storage
  # endpoint: ""                           # Object storage endpoint URL
  # accessKey: ""                          # Access key for authentication
  # secretKey: ""                          # Secret key for authentication
  # bucket: "csghub-registry"              # Bucket name
  # region: ""                             # Storage region
  # secure: false                          # Use secure TLS certificates
  # encrypt: false                         # Enable TLS encryption
  # pathStyle: true                        # Use path-style addressing

## Pod Metadata
podAnnotations: {}
## Example: { "prometheus.io/scrape": "true", "prometheus.io/port": "9090" }

podLabels: {}
## Example: { "app.kubernetes.io/component": "runner", "environment": "production" }

## Security Contexts
podSecurityContext: {}
## Example: { fsGroup: 2000, runAsNonRoot: true, runAsUser: 1000 }

securityContext: {}
  ## Example:
  # capabilities:
  #   drop: ["ALL"]
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## Environment Variables
environments: {}
## Example: { DEBUG: "false", MAX_WORKERS: "10", TIMEOUT: "300" }

## Deployment Annotations
annotations: {}
## Example: { "reloader.stakater.com/auto": "true" }

## Resource Quota enabled
resourceQuota:
  enabled: false

## Resource Requests and Limits
resources: {}
  ## Example:
  # requests:
  #   memory: "256Mi"
  #   cpu: "250m"
  # limits:
  #   memory: "512Mi"
  #   cpu: "500m"

## Node Scheduling Configuration
nodeSelector: {}
## Example: { "node-type": "compute-optimized", "gpu": "true" }

tolerations: []
  ## Example:
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "csghub"
  #   effect: "NoSchedule"

affinity: {}
  ## Example:
  # podAntiAffinity:
  #   preferredDuringSchedulingIgnoredDuringExecution:
  #   - weight: 100
  #     podAffinityTerm:
  #       labelSelector:
  #         matchExpressions:
  #         - key: "app"
  #           operator: "In"
  #           values: ["runner"]
  #       topologyKey: "kubernetes.io/hostname"

#################################################################
##  Dependent SubCharts Configuration                          ##
##  PLEASE DO NOT UPDATE!!!                                    ##
#################################################################
## Do not modify it unless you know the purpose of the modification.

## Ingress-nginx configuration
ingress-nginx:
  enabled: true                            # Enable NGINX Ingress Controller

  controller:
    progressDeadlineSeconds: 600           # Deployment progress deadline

    ## Image configuration
    image:
      image: "opencsghq/ingress-nginx-controller"
      digest: ""                           # Image digest (do not update)

    ## Admission webhooks configuration
    admissionWebhooks:
      patch:
        image:
          image: "opencsghq/ingress-nginx-kube-webhook-certgen"
          digest: ""                       # Image digest (do not update)

    ## Service configuration
    service:
      type: *type                          # Service type
      nodePorts:
        http: 30080                        # HTTP node port
        https: 30443                       # HTTPS node port

## Reloader configuration
reloader:
  enabled: true
  image:
    name: "opencsghq/stakater-reloader"    # Reloader image name

## Prometheus monitoring configuration
prometheus:
  enabled: false                           # Enable Prometheus

  ingress:
    enabled: false                         # Enable Prometheus ingress
    basicAuth: {}                          # Basic authentication
    # username: "prometheus"
    # password: ""

  ## Component configuration
  alertmanager:
    enabled: false                         # Disable Alertmanager
  prometheus-pushgateway:
    enabled: false                         # Disable pushgateway
  prometheus-node-exporter:
    enabled: false                         # Disable node exporter

  ## Server configuration
  server:
    image:
      registry: "quay.io"
      repository: "prometheus/prometheus"
      tag: "v3.5.0"

  ## ConfigMap reload configuration
  configmapReload:
    prometheus:
      image:
        registry: "quay.io"
        repository: "prometheus-operator/prometheus-config-reloader"
        tag: "v0.85.0"

  ## Kube-state-metrics configuration
  kube-state-metrics:
    image:
      tag: "v2.17.0"
