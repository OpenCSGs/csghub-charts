{{- /*
Copyright OpenCSG, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.custom" (list . "gateway") }}
  namespace: {{ .Release.Namespace }}
  labels: {{ include "common.labels" (dict "context" . "service" "gateway") | nindent 4 }}
  annotations: {{ .Values.csghub.gateway.annotations | toYaml | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "common.serviceSelectorLabels" (dict "selector" true "context" . "service" "gateway") | nindent 6 }}
  replicas: {{ .Values.csghub.gateway.replicas }}
  revisionHistoryLimit: 1
  minReadySeconds: 30
  template:
    metadata:
      annotations:
        checksum/config1: {{ include (print $.Template.BasePath "/configmap-server.yaml") . | sha256sum }}
        checksum/config2: {{ include (print $.Template.BasePath "/configmap-gateway-rproxy.yaml") . | sha256sum }}
        checksum/config3: {{ include (print $.Template.BasePath "/configmap-gateway-moderation.yaml") . | sha256sum }}
        {{- with .Values.csghub.gateway.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common.labels" (dict "context" . "service" "gateway") | nindent 8 }}
    spec:
      dnsPolicy: None
      dnsConfig:
        nameservers:
          - {{ include "coredns.csghub" . }}
        searches:
          - {{ .Release.Namespace }}.svc.cluster.local
          - svc.cluster.local
          - cluster.local
        options:
          - name: ndots
            value: "5"
      {{- with (or .Values.global.image.pullSecrets .Values.csghub.server.image.pullSecrets) }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      {{- with .Values.csghub.gateway.securityContext }}
      securityContext:
        {{- . | toYaml | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 10
      {{- if .Values.csghub.gateway.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.custom" (list . "gateway") }}
      automountServiceAccountToken: {{ .Values.csghub.gateway.serviceAccount.automount }}
      {{- end }}
      initContainers:
        - name: wait-for-server
          image: {{ or .Values.global.image.registry .Values.csghub.server.image.registry }}/busybox:latest
          imagePullPolicy: {{ .Values.csghub.server.image.pullPolicy }}
          command: [ "/bin/sh", "-c", "until nc -z {{ include "common.names.custom" (list . "server") }} {{ include "csghub.svc.port" "server" }}; do echo 'Wait for csghub-server to be ready'; sleep 2; done" ]
      containers:
        - name: rproxy
          image: {{ or .Values.global.image.registry .Values.csghub.server.image.registry }}/{{ or .Values.global.image.name .Values.csghub.server.image.repository }}:{{ include "csghub.image.tag" (dict "tag" (or .Values.global.image.tag .Values.csghub.server.image.tag) "context" .) }}
          imagePullPolicy: {{ or .Values.global.image.pullPolicy .Values.csghub.server.image.pullPolicy }}
          command: [ "/bin/sh", "-c", "update-ca-certificates && /starhub-bin/starhub start rproxy" ]
          ports:
            - containerPort: 8083
              name: rproxy
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ include "common.names.custom" (list . "server") }}
            - secretRef:
                name: {{ include "common.names.custom" (list . "nats") }}
            {{- if not .Values.global.redis.enabled }}
            - secretRef:
                name: {{ include "common.names.custom" (list . "redis") }}
            {{- end }}
          env:
            {{- if not .Values.global.redis.enabled }}
            - name: STARHUB_SERVER_REDIS_PASSWORD
              value: "$(REDIS_PASSWD)"
            {{- end }}
            - name: STARHUB_SERVER_SPACE_SESSION_SECRET_KEY
              value: {{ sha256sum .Release.Name | trunc 32 | quote }}
            - name: OPENCSG_ACCOUNTING_NATS_URL
              value: "nats://$(NATS_USERNAME):$(NATS_PASSWORD)@{{ include "nats.internal.domain" . }}:{{ include "nats.internal.ports.api" . }}"
            {{- if eq (include "global.ingress.tls.enabled" .) "true" }}
            - name: STARHUB_SERVER_ENABLE_HTTPS
              value: "true"
            {{- end }}
            {{- with .Values.csghub.gateway.environments }}
            {{- range $key, $value := . }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          resources:
            {{- .Values.csghub.gateway.resources | toYaml | nindent 12 }}
          livenessProbe:
            tcpSocket:
              port: 8083
            initialDelaySeconds: 20
            periodSeconds: 10
          securityContext:
            {{- .Values.csghub.gateway.podSecurityContext | toYaml | nindent 12 }}
        - name: rproxy-nginx
          image: {{ or .Values.global.image.registry .Values.csghub.server.image.registry }}/nginx:latest
          imagePullPolicy: {{ .Values.csghub.server.image.pullPolicy }}
          command: [ "/bin/sh", "-c", "update-ca-certificates && nginx -g \"daemon off;\""]
          ports:
            - containerPort: 80
              name: rproxy-nginx
              protocol: TCP
            {{- with .Values.csghub.gateway.environments }}
            {{- range $key, $value := . }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          resources:
            {{- .Values.csghub.gateway.resources | toYaml | nindent 12 }}
          livenessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 20
            periodSeconds: 10
          securityContext:
            {{- .Values.csghub.gateway.podSecurityContext | toYaml | nindent 12 }}
          volumeMounts:
            - name: rproxy-nginx-config
              mountPath: /etc/nginx/conf.d
              readOnly: false
        {{- if .Values.global.moderation.enabled }}
        - name: moderation
          image: {{ or .Values.global.image.registry .Values.csghub.server.image.registry }}/{{ or .Values.global.image.name .Values.csghub.server.image.repository }}:{{ include "csghub.image.tag" (dict "tag" (or .Values.global.image.tag .Values.csghub.server.image.tag) "context" .) }}
          imagePullPolicy: {{ or .Values.global.image.pullPolicy .Values.csghub.server.image.pullPolicy }}
          command: [ "/starhub-bin/starhub", "moderation", "launch" ]
          ports:
            - containerPort: 8089
              name: moderation
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ include "common.names.custom" (list . "gateway-moderation") }}
            - configMapRef:
                name: {{ include "common.names.custom" (list . "server") }}
          {{- with .Values.csghub.gateway.environments }}
          env:
            {{- range $key, $value := . }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          resources:
            {{- .Values.csghub.gateway.resources | toYaml | nindent 12 }}
          livenessProbe:
            tcpSocket:
              port: 8089
            initialDelaySeconds: 20
            periodSeconds: 10
          securityContext:
            {{- .Values.csghub.gateway.podSecurityContext | toYaml | nindent 12 }}
        {{- end }}
        - name: aigateway
          image: {{ or .Values.global.image.registry .Values.csghub.server.image.registry }}/{{ or .Values.global.image.name .Values.csghub.server.image.repository }}:{{ include "csghub.image.tag" (dict "tag" (or .Values.global.image.tag .Values.csghub.server.image.tag) "context" .) }}
          imagePullPolicy: {{ or .Values.global.image.pullPolicy .Values.csghub.server.image.pullPolicy }}
          command: [ "/starhub-bin/starhub", "aigateway", "launch" ]
          ports:
            - containerPort: 8084
              name: aigateway
              protocol: TCP
          envFrom:
            - secretRef:
                name: {{ include "common.names.custom" (list . "nats") }}
            {{- if not .Values.global.redis.enabled }}
            - secretRef:
                name: {{ include "common.names.custom" (list . "redis") }}
            {{- end }}
            - configMapRef:
                name: {{ include "common.names.custom" (list . "server") }}
          env:
            - name: OPENCSG_AIGATEWAY_PORT
              value: "8084"
            {{- if not .Values.global.redis.enabled }}
            - name: STARHUB_SERVER_REDIS_PASSWORD
              value: "$(REDIS_PASSWD)"
            {{- end }}
            - name: OPENCSG_ACCOUNTING_NATS_URL
              value: "nats://$(NATS_USERNAME):$(NATS_PASSWORD)@{{ include "nats.internal.domain" . }}:{{ include "nats.internal.ports.api" . }}"
          {{- with .Values.csghub.gateway.environments }}
            {{- range $key, $value := . }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          resources:
            {{- .Values.csghub.gateway.resources | toYaml | nindent 12 }}
          livenessProbe:
            tcpSocket:
              port: 8084
            initialDelaySeconds: 20
            periodSeconds: 10
          securityContext:
            {{- .Values.csghub.gateway.podSecurityContext | toYaml | nindent 12 }}
      volumes:
        - name: rproxy-nginx-config
          configMap:
            name: {{ include "common.names.custom" (list . "gateway-rproxy-nginx") }}
      {{- with .Values.csghub.gateway.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.csghub.gateway.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.csghub.gateway.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}