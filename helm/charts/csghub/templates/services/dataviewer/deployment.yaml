{{- /*
Copyright OpenCSG, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

{{- if .Values.csghub.dataviewer.enabled }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.custom" (list . "dataviewer") }}
  namespace: {{ .Release.Namespace }}
  labels: {{ include "common.labels" (dict "context" . "service" "dataviewer") | nindent 4 }}
  annotations: {{ .Values.csghub.dataviewer.annotations | toYaml | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "common.serviceSelectorLabels" (dict "selector" true "context" . "service" "dataviewer") | nindent 6 }}
  replicas: {{ .Values.csghub.dataviewer.replicas }}
  revisionHistoryLimit: 1
  minReadySeconds: 30
  template:
    metadata:
      annotations:
        {{- with .Values.csghub.dataviewer.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common.labels" (dict "context" . "service" "dataviewer") | nindent 8 }}
    spec:
      {{- with (or .Values.global.image.pullSecrets .Values.csghub.dataviewer.image.pullSecrets) }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      {{- with .Values.csghub.dataviewer.securityContext }}
      securityContext:
        {{- . | toYaml | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 10
      {{- if .Values.csghub.dataviewer.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.custom" (list . "dataviewer") }}
      automountServiceAccountToken: {{ .Values.csghub.dataviewer.serviceAccount.automount }}
      {{- end }}
      initContainers:
        - name: wait-for-redis
          image: {{ or .Values.global.image.registry .Values.csghub.dataviewer.image.registry }}/redis:7.2.5
          imagePullPolicy: {{ .Values.csghub.dataviewer.image.pullPolicy }}
          command: [ "/bin/sh", "-c", "until redis-cli -h {{ include "csghub.redis.host" . }} -p {{ include "csghub.redis.port" . }} ping; do echo 'Wait for Redis to be ready'; sleep 2; done" ]
          envFrom:
            {{- if .Values.global.redis.enabled }}
            - configMapRef:
                name: {{ include "common.names.custom" (list . "server") }}
            {{- else }}
            - secretRef:
                name: {{ include "common.names.custom" (list . "redis") }}
            {{- end }}
          env:
            - name: REDISCLI_AUTH
              {{- if .Values.global.redis.enabled }}
              value: "$(STARHUB_SERVER_REDIS_PASSWORD)"
              {{- else }}
              value: "$(REDIS_PASSWD)"
              {{- end }}
        - name: wait-for-temporal
          image: {{ or .Values.global.image.registry .Values.csghub.dataviewer.image.registry }}/busybox:latest
          imagePullPolicy: {{ .Values.csghub.dataviewer.image.pullPolicy }}
          command: [ "/bin/sh", "-c", "until nc -z {{ include "temporal.internal.domain" . }} {{ include "temporal.internal.port" . }}; do echo 'Wait for temporal to be ready'; sleep 2; done" ]
      containers:
        - name: dataviewer
          image: {{ or .Values.global.image.registry .Values.csghub.dataviewer.image.registry }}/{{ or .Values.global.image.name .Values.csghub.dataviewer.image.repository }}:{{ include "csghub.image.tag" (dict "tag" (or .Values.global.image.tag .Values.csghub.dataviewer.image.tag) "context" .) }}
          imagePullPolicy: {{ or .Values.global.image.pullPolicy .Values.csghub.dataviewer.image.pullPolicy }}
          command: [ "/starhub-bin/starhub", "dataviewer", "launch" ]
          ports:
            - containerPort: 8093
              name: dataviewer
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ include "common.names.custom" (list . "server") }}
            {{- if not .Values.global.redis.enabled }}
            - secretRef:
                name: {{ include "common.names.custom" (list . "redis") }}
            {{- end }}
            {{- if .Values.global.objectStore.enabled }}
            - secretRef:
                name: {{ include "common.names.custom" (list . "minio") }}
            {{- end }}
          env:
            {{- if not .Values.global.redis.enabled }}
            - name: STARHUB_SERVER_REDIS_PASSWORD
              value: "$(REDIS_PASSWD)"
            {{- end }}
            {{- if .Values.global.objectStore.enabled }}
            - name: STARHUB_SERVER_S3_ACCESS_KEY_ID
              value: "$(MINIO_ROOT_USER)"
            - name: STARHUB_SERVER_S3_ACCESS_KEY_SECRET
              value: "$(MINIO_ROOT_PASSWORD)"
            {{- end }}
            {{- with .Values.csghub.dataviewer.environments }}
            {{- range $key, $value := . }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          resources:
            {{- .Values.csghub.dataviewer.resources | toYaml | nindent 12 }}
          securityContext:
            {{- .Values.csghub.dataviewer.podSecurityContext | toYaml | nindent 12 }}
      {{- with .Values.csghub.dataviewer.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.csghub.dataviewer.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.csghub.dataviewer.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}